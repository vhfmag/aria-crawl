{
    "roles": [
        {
            "id": "any",
            "description": "ARIA global states and properties can be used on any HTML element.",
            "props": [
                {
                    "id": "aria-atomic",
                    "isRequired": false
                },
                {
                    "id": "aria-controls",
                    "isRequired": false
                },
                {
                    "id": "aria-describedby",
                    "isRequired": false
                },
                {
                    "id": "aria-details",
                    "isRequired": false
                },
                {
                    "id": "aria-dropeffect",
                    "isRequired": false
                },
                {
                    "id": "aria-errormessage",
                    "isRequired": false
                },
                {
                    "id": "aria-flowto",
                    "isRequired": false
                },
                {
                    "id": "aria-haspopup",
                    "isRequired": false
                },
                {
                    "id": "aria-keyshortcuts",
                    "isRequired": false
                },
                {
                    "id": "aria-label",
                    "isRequired": false
                },
                {
                    "id": "aria-labelledby",
                    "isRequired": false
                },
                {
                    "id": "aria-live",
                    "isRequired": false
                },
                {
                    "id": "aria-owns",
                    "isRequired": false
                },
                {
                    "id": "aria-relevant",
                    "isRequired": false
                },
                {
                    "id": "aria-roledescription",
                    "isRequired": false
                }
            ],
            "states": [
                {
                    "id": "aria-busy",
                    "isRequired": false
                },
                {
                    "id": "aria-current",
                    "isRequired": false
                },
                {
                    "id": "aria-disabled",
                    "isRequired": false
                },
                {
                    "id": "aria-grabbed",
                    "isRequired": false
                },
                {
                    "id": "aria-hidden",
                    "isRequired": false
                },
                {
                    "id": "aria-invalid",
                    "isRequired": false
                }
            ]
        },
        {
            "id": "alert",
            "description": "A type of live region with important, and usually time-sensitive, information. See related alertdialog and status.",
            "props": [],
            "states": [
                {
                    "id": "aria-expanded",
                    "isRequired": false
                }
            ]
        },
        {
            "id": "alertdialog",
            "description": "A type of dialog that contains an alert message, where initial focus goes to an element within the dialog. See related alert and dialog.",
            "props": [
                {
                    "id": "aria-modal",
                    "isRequired": false
                }
            ],
            "states": [
                {
                    "id": "aria-expanded",
                    "isRequired": false
                }
            ]
        },
        {
            "id": "application",
            "description": "A structure containing one or more focusable elements requiring user input, such as   keyboard or gesture events, that do not follow a standard interaction   pattern supported by a widget role. - changed)",
            "props": [
                {
                    "id": "aria-activedescendant",
                    "isRequired": false
                },
                {
                    "id": "",
                    "isRequired": false
                }
            ],
            "states": []
        },
        {
            "id": "article",
            "description": "A section of a page that consists of a composition that forms an independent part of a document, page, or site.",
            "props": [],
            "states": [
                {
                    "id": "aria-expanded",
                    "isRequired": false
                }
            ]
        },
        {
            "id": "banner",
            "description": "A region that contains mostly site-oriented content, rather than page-specific content.",
            "props": [],
            "states": [
                {
                    "id": "aria-expanded",
                    "isRequired": false
                }
            ]
        },
        {
            "id": "button",
            "description": "An input that allows for user-triggered actions when clicked or pressed. See related link.",
            "props": [],
            "states": [
                {
                    "id": "aria-expanded",
                    "isRequired": false
                },
                {
                    "id": "aria-pressed",
                    "isRequired": false
                }
            ]
        },
        {
            "id": "checkbox",
            "description": "A checkable input that has three possible values: true, false, or mixed.",
            "props": [
                {
                    "id": "aria-readonly",
                    "isRequired": false
                }
            ],
            "states": [
                {
                    "id": "aria-checked",
                    "isRequired": true
                }
            ]
        },
        {
            "id": "cell",
            "description": "A cell in a tabular container.",
            "props": [
                {
                    "id": "aria-colspan",
                    "isRequired": false
                },
                {
                    "id": "aria-colindex",
                    "isRequired": false
                },
                {
                    "id": "aria-rowindex",
                    "isRequired": false
                },
                {
                    "id": "aria-rowspan",
                    "isRequired": false
                }
            ],
            "states": []
        },
        {
            "id": "columnheader",
            "description": "A cell containing header information for a column.",
            "props": [
                {
                    "id": "aria-sort",
                    "isRequired": false
                },
                {
                    "id": "aria-readonly",
                    "isRequired": false
                },
                {
                    "id": "aria-required",
                    "isRequired": false
                },
                {
                    "id": "aria-colspan",
                    "isRequired": false
                },
                {
                    "id": "aria-colindex",
                    "isRequired": false
                },
                {
                    "id": "aria-rowindex",
                    "isRequired": false
                },
                {
                    "id": "aria-rowspan",
                    "isRequired": false
                }
            ],
            "states": [
                {
                    "id": "aria-selected",
                    "isRequired": false
                },
                {
                    "id": "aria-expanded",
                    "isRequired": false
                }
            ]
        },
        {
            "id": "combobox",
            "description": "A presentation of a select; usually similar to a textbox where users can type ahead to select an option, or type to enter arbitrary text as a new    item in the list. See related listbox.",
            "props": [
                {
                    "id": "aria-controls",
                    "isRequired": true
                },
                {
                    "id": "aria-autocomplete",
                    "isRequired": false
                },
                {
                    "id": "aria-required",
                    "isRequired": false
                },
                {
                    "id": "aria-activedescendant",
                    "isRequired": false
                },
                {
                    "id": "aria-orientation",
                    "isRequired": false
                }
            ],
            "states": [
                {
                    "id": "aria-expanded",
                    "isRequired": true
                }
            ]
        },
        {
            "id": "complementary",
            "description": "A supporting section of the document, designed to be complementary to the main content at a similar level in the DOM hierarchy, but remains\n\t    meaningful when separated from the main content.",
            "props": [],
            "states": [
                {
                    "id": "aria-expanded",
                    "isRequired": false
                }
            ]
        },
        {
            "id": "contentinfo",
            "description": "A large perceivable region that contains information about the parent document.",
            "props": [],
            "states": [
                {
                    "id": "aria-expanded",
                    "isRequired": false
                }
            ]
        },
        {
            "id": "definition",
            "description": "A definition of a term or concept.",
            "props": [],
            "states": [
                {
                    "id": "aria-expanded",
                    "isRequired": false
                }
            ]
        },
        {
            "id": "dialog",
            "description": "A dialog is an application window that is designed to interrupt the current processing of an application in order to prompt the user to enter\n\t    information or require a response. See related alertdialog.",
            "props": [
                {
                    "id": "aria-modal",
                    "isRequired": false
                }
            ],
            "states": [
                {
                    "id": "aria-expanded",
                    "isRequired": false
                }
            ]
        },
        {
            "id": "directory",
            "description": "A list of references to members of a group, such as a static table of contents.",
            "props": [],
            "states": [
                {
                    "id": "aria-expanded",
                    "isRequired": false
                }
            ]
        },
        {
            "id": "document",
            "description": "A region containing related information that is declared as document content, as opposed to a web application.",
            "props": [],
            "states": [
                {
                    "id": "aria-expanded",
                    "isRequired": false
                }
            ]
        },
        {
            "id": "feed",
            "description": "A scrollable list of articles where scrolling may cause articles to be added to or removed from either end of the list.",
            "props": [],
            "states": [
                {
                    "id": "aria-expanded",
                    "isRequired": false
                }
            ]
        },
        {
            "id": "figure",
            "description": "A perceivable section of content that typically contains a graphical document, images, code snippets, or example text. ",
            "props": [],
            "states": [
                {
                    "id": "aria-expanded",
                    "isRequired": false
                }
            ]
        },
        {
            "id": "form",
            "description": "A landmark region that contains a collection of items and objects that, as a whole, combine to create a form. See related search. ",
            "props": [],
            "states": [
                {
                    "id": "aria-expanded",
                    "isRequired": false
                }
            ]
        },
        {
            "id": "grid",
            "description": "A grid is an interactive control which contains cells of tabular data arranged in rows and columns, like a table.",
            "props": [
                {
                    "id": "aria-level",
                    "isRequired": false
                },
                {
                    "id": "aria-multiselectable",
                    "isRequired": false
                },
                {
                    "id": "aria-readonly",
                    "isRequired": false
                },
                {
                    "id": "aria-activedescendant",
                    "isRequired": false
                },
                {
                    "id": "aria-colcount",
                    "isRequired": false
                },
                {
                    "id": "aria-rowcount",
                    "isRequired": false
                }
            ],
            "states": [
                {
                    "id": "aria-expanded",
                    "isRequired": false
                }
            ]
        },
        {
            "id": "gridcell",
            "description": "A cell in a grid or treegrid.",
            "props": [
                {
                    "id": "aria-readonly",
                    "isRequired": false
                },
                {
                    "id": "aria-required",
                    "isRequired": false
                },
                {
                    "id": "aria-colindex",
                    "isRequired": false
                },
                {
                    "id": "aria-colspan",
                    "isRequired": false
                },
                {
                    "id": "aria-rowindex",
                    "isRequired": false
                },
                {
                    "id": "aria-rowspan",
                    "isRequired": false
                }
            ],
            "states": [
                {
                    "id": "aria-selected",
                    "isRequired": false
                },
                {
                    "id": "aria-expanded",
                    "isRequired": false
                }
            ]
        },
        {
            "id": "group",
            "description": "A set of user interface objects which are not intended to be included in a page summary or table of contents by assistive technologies.",
            "props": [
                {
                    "id": "aria-activedescendant",
                    "isRequired": false
                }
            ],
            "states": [
                {
                    "id": "aria-expanded",
                    "isRequired": false
                }
            ]
        },
        {
            "id": "heading",
            "description": "A heading for a section of the page.",
            "props": [
                {
                    "id": "aria-level",
                    "isRequired": false
                }
            ],
            "states": [
                {
                    "id": "aria-expanded",
                    "isRequired": false
                }
            ]
        },
        {
            "id": "img",
            "description": "A container for a collection of elements that form an image.",
            "props": [],
            "states": [
                {
                    "id": "aria-expanded",
                    "isRequired": false
                }
            ]
        },
        {
            "id": "link",
            "description": "An interactive reference to an internal or external resource that, when activated, causes the user agent to navigate to that resource. See\n\t    related button.",
            "props": [],
            "states": [
                {
                    "id": "aria-expanded",
                    "isRequired": false
                }
            ]
        },
        {
            "id": "list",
            "description": "A group of non-interactive list items. See related listbox.",
            "props": [],
            "states": [
                {
                    "id": "aria-expanded",
                    "isRequired": false
                }
            ]
        },
        {
            "id": "listbox",
            "description": "A widget that allows the user to select one or more items from a list of choices. See related combobox and list.",
            "props": [
                {
                    "id": "aria-required",
                    "isRequired": false
                },
                {
                    "id": "aria-multiselectable",
                    "isRequired": false
                },
                {
                    "id": "aria-activedescendant",
                    "isRequired": false
                },
                {
                    "id": "aria-orientation",
                    "isRequired": false
                }
            ],
            "states": [
                {
                    "id": "aria-expanded",
                    "isRequired": false
                }
            ]
        },
        {
            "id": "listitem",
            "description": "A single item in a list or directory.",
            "props": [
                {
                    "id": "aria-level",
                    "isRequired": false
                },
                {
                    "id": "aria-posinset",
                    "isRequired": false
                },
                {
                    "id": "aria-setsize",
                    "isRequired": false
                }
            ],
            "states": [
                {
                    "id": "aria-expanded",
                    "isRequired": false
                }
            ]
        },
        {
            "id": "log",
            "description": "A type of live region where new information is added in meaningful order and old information may disappear. See related marquee.\n\t    ",
            "props": [],
            "states": [
                {
                    "id": "aria-expanded",
                    "isRequired": false
                }
            ]
        },
        {
            "id": "main",
            "description": "The main content of a document.",
            "props": [],
            "states": [
                {
                    "id": "aria-expanded",
                    "isRequired": false
                }
            ]
        },
        {
            "id": "marquee",
            "description": "A type of live region where non-essential information changes frequently. See related log.",
            "props": [],
            "states": [
                {
                    "id": "aria-expanded",
                    "isRequired": false
                }
            ]
        },
        {
            "id": "math",
            "description": "Content that represents a mathematical expression. ",
            "props": [],
            "states": [
                {
                    "id": "aria-expanded",
                    "isRequired": false
                }
            ]
        },
        {
            "id": "menu",
            "description": "A type of widget that offers a list of choices to the user.",
            "props": [
                {
                    "id": "aria-activedescendant",
                    "isRequired": false
                },
                {
                    "id": "aria-orientation",
                    "isRequired": false
                }
            ],
            "states": [
                {
                    "id": "aria-expanded",
                    "isRequired": false
                }
            ]
        },
        {
            "id": "menubar",
            "description": "A presentation of menu that usually remains visible and is usually presented horizontally.",
            "props": [
                {
                    "id": "aria-activedescendant",
                    "isRequired": false
                },
                {
                    "id": "aria-orientation",
                    "isRequired": false
                }
            ],
            "states": [
                {
                    "id": "aria-expanded",
                    "isRequired": false
                }
            ]
        },
        {
            "id": "menuitem",
            "description": "An option in a group of choices contained by a menu or menubar.",
            "props": [
                {
                    "id": "aria-posinset",
                    "isRequired": false
                },
                {
                    "id": "aria-setsize",
                    "isRequired": false
                }
            ],
            "states": []
        },
        {
            "id": "menuitemcheckbox",
            "description": "A checkable menuitem that has three possible values: true, false, or mixed.",
            "props": [
                {
                    "id": "aria-posinset",
                    "isRequired": false
                },
                {
                    "id": "aria-setsize",
                    "isRequired": false
                }
            ],
            "states": [
                {
                    "id": "aria-checked",
                    "isRequired": true
                }
            ]
        },
        {
            "id": "menuitemradio",
            "description": "A checkable menuitem in a group of menuitemradio roles, only one of which can be checked at a time.",
            "props": [
                {
                    "id": "aria-posinset",
                    "isRequired": false
                },
                {
                    "id": "aria-setsize",
                    "isRequired": false
                }
            ],
            "states": [
                {
                    "id": "aria-checked",
                    "isRequired": true
                }
            ]
        },
        {
            "id": "navigation",
            "description": "A collection of navigational elements (usually links) for navigating the document or related documents.",
            "props": [],
            "states": [
                {
                    "id": "aria-expanded",
                    "isRequired": false
                }
            ]
        },
        {
            "id": "none",
            "description": "An element whose implicit native role semantics will not be mapped to the accessibility API. See synonym presentation",
            "props": [],
            "states": []
        },
        {
            "id": "note",
            "description": "A section whose content is parenthetic or ancillary to the main content of the resource.",
            "props": [],
            "states": [
                {
                    "id": "aria-expanded",
                    "isRequired": false
                }
            ]
        },
        {
            "id": "option",
            "description": "A selectable item in a select list.",
            "props": [
                {
                    "id": "aria-posinset",
                    "isRequired": false
                },
                {
                    "id": "aria-setsize",
                    "isRequired": false
                }
            ],
            "states": [
                {
                    "id": "aria-checked",
                    "isRequired": false
                },
                {
                    "id": "aria-selected",
                    "isRequired": false
                }
            ]
        },
        {
            "id": "presentation",
            "description": "An element whose implicit native role semantics will not be mapped to the accessibility API. ",
            "props": [],
            "states": []
        },
        {
            "id": "progressbar",
            "description": "An element that displays the progress status for tasks that take a long time.",
            "props": [
                {
                    "id": "aria-valuemax",
                    "isRequired": false
                },
                {
                    "id": "aria-valuemin",
                    "isRequired": false
                },
                {
                    "id": "aria-valuenow",
                    "isRequired": false
                },
                {
                    "id": "aria-valuetext",
                    "isRequired": false
                }
            ],
            "states": []
        },
        {
            "id": "radio",
            "description": "A checkable input in a group of radio roles, only one of which can be checked at a time.",
            "props": [
                {
                    "id": "aria-posinset",
                    "isRequired": false
                },
                {
                    "id": "aria-setsize",
                    "isRequired": false
                }
            ],
            "states": [
                {
                    "id": "aria-checked",
                    "isRequired": true
                },
                {
                    "id": "aria-selected",
                    "isRequired": false
                }
            ]
        },
        {
            "id": "radiogroup",
            "description": "A group of radio buttons.",
            "props": [
                {
                    "id": "aria-required",
                    "isRequired": false
                },
                {
                    "id": "aria-activedescendant",
                    "isRequired": false
                },
                {
                    "id": "aria-orientation",
                    "isRequired": false
                }
            ],
            "states": [
                {
                    "id": "aria-expanded",
                    "isRequired": false
                }
            ]
        },
        {
            "id": "region",
            "description": "A large perceivable section of a web page or document, that the author feels is important enough to be included in a page summary or table of\n\t    contents, for example, an area of the page containing live sporting event statistics.",
            "props": [],
            "states": [
                {
                    "id": "aria-expanded",
                    "isRequired": false
                }
            ]
        },
        {
            "id": "row",
            "description": "A row of cells in a tabular container.\n\t    ",
            "props": [
                {
                    "id": "aria-colindex",
                    "isRequired": false
                },
                {
                    "id": "aria-rowindex",
                    "isRequired": false
                },
                {
                    "id": "aria-level",
                    "isRequired": false
                },
                {
                    "id": "aria-activedescendant",
                    "isRequired": false
                }
            ],
            "states": [
                {
                    "id": "aria-selected",
                    "isRequired": false
                },
                {
                    "id": "aria-expanded",
                    "isRequired": false
                }
            ]
        },
        {
            "id": "rowgroup",
            "description": "A group containing one or more row elements in a grid.",
            "props": [],
            "states": []
        },
        {
            "id": "rowheader",
            "description": "A cell containing header information for a row in a grid.",
            "props": [
                {
                    "id": "aria-readonly",
                    "isRequired": false
                },
                {
                    "id": "aria-required",
                    "isRequired": false
                },
                {
                    "id": "aria-colspan",
                    "isRequired": false
                },
                {
                    "id": "aria-colindex",
                    "isRequired": false
                },
                {
                    "id": "aria-rowindex",
                    "isRequired": false
                },
                {
                    "id": "aria-rowspan",
                    "isRequired": false
                }
            ],
            "states": [
                {
                    "id": "aria-selected",
                    "isRequired": false
                },
                {
                    "id": "aria-expanded",
                    "isRequired": false
                }
            ]
        },
        {
            "id": "scrollbar",
            "description": "A graphical object that controls the scrolling of content within a viewing area, regardless of whether the content is fully displayed within the\n\t    viewing area.",
            "props": [
                {
                    "id": "aria-controls",
                    "isRequired": true
                },
                {
                    "id": "aria-orientation",
                    "isRequired": true
                },
                {
                    "id": "aria-valuemax",
                    "isRequired": true
                },
                {
                    "id": "aria-valuemin",
                    "isRequired": true
                },
                {
                    "id": "aria-valuenow",
                    "isRequired": true
                },
                {
                    "id": "aria-valuetext",
                    "isRequired": false
                }
            ],
            "states": [
                {
                    "id": "aria-expanded",
                    "isRequired": false
                }
            ]
        },
        {
            "id": "search",
            "description": "A landmark region that contains a collection of items and objects that, as a whole, combine to create a search facility. See related form\n\t    .",
            "props": [],
            "states": [
                {
                    "id": "aria-expanded",
                    "isRequired": false
                }
            ]
        },
        {
            "id": "searchbox",
            "description": "A type of textbox intended for specifying search criteria.",
            "props": [
                {
                    "id": "aria-activedescendant",
                    "isRequired": false
                },
                {
                    "id": "aria-autocomplete",
                    "isRequired": false
                },
                {
                    "id": "aria-multiline",
                    "isRequired": false
                },
                {
                    "id": "aria-placeholder",
                    "isRequired": false
                },
                {
                    "id": "aria-readonly",
                    "isRequired": false
                },
                {
                    "id": "aria-required",
                    "isRequired": false
                }
            ],
            "states": []
        },
        {
            "id": "separator",
            "description": "A divider that separates and distinguishes sections of content or groups of menuitems.",
            "props": [
                {
                    "id": "aria-valuemax",
                    "isRequired": true
                },
                {
                    "id": "aria-valuemin",
                    "isRequired": true
                },
                {
                    "id": "aria-valuenow",
                    "isRequired": true
                },
                {
                    "id": "aria-valuetext",
                    "isRequired": false
                },
                {
                    "id": "aria-orientation",
                    "isRequired": false
                }
            ],
            "states": []
        },
        {
            "id": "slider",
            "description": "A user input where the user selects a value from within a given range.",
            "props": [
                {
                    "id": "aria-valuemax",
                    "isRequired": true
                },
                {
                    "id": "aria-valuemin",
                    "isRequired": true
                },
                {
                    "id": "aria-valuenow",
                    "isRequired": true
                },
                {
                    "id": "aria-orientation",
                    "isRequired": false
                },
                {
                    "id": "aria-valuetext",
                    "isRequired": false
                }
            ],
            "states": []
        },
        {
            "id": "spinbutton",
            "description": "A form of range that expects the user to select from among discrete choices.",
            "props": [
                {
                    "id": "aria-valuemax",
                    "isRequired": true
                },
                {
                    "id": "aria-valuemin",
                    "isRequired": true
                },
                {
                    "id": "aria-valuenow",
                    "isRequired": true
                },
                {
                    "id": "aria-required",
                    "isRequired": false
                },
                {
                    "id": "aria-readonly",
                    "isRequired": false
                },
                {
                    "id": "aria-valuetext",
                    "isRequired": false
                }
            ],
            "states": []
        },
        {
            "id": "status",
            "description": "A container whose content is advisory information for the user but is not important enough to justify an alert, often but not necessarily\n\t    presented as a status bar. See related alert.",
            "props": [],
            "states": [
                {
                    "id": "aria-expanded",
                    "isRequired": false
                }
            ]
        },
        {
            "id": "switch",
            "description": " A type of checkbox that represents on/off values, as opposed to checked/unchecked values.",
            "props": [
                {
                    "id": "aria-readonly",
                    "isRequired": false
                }
            ],
            "states": [
                {
                    "id": "aria-checked",
                    "isRequired": true
                }
            ]
        },
        {
            "id": "tab",
            "description": "A grouping label providing a mechanism for selecting the tab content that is to be rendered to the user.",
            "props": [
                {
                    "id": "aria-posinset",
                    "isRequired": false
                },
                {
                    "id": "aria-setsize",
                    "isRequired": false
                }
            ],
            "states": [
                {
                    "id": "aria-selected",
                    "isRequired": false
                },
                {
                    "id": "aria-expanded",
                    "isRequired": false
                }
            ]
        },
        {
            "id": "table",
            "description": "A section containing data arranged in rows and columns. The table role is intended for tabular containers which are not interactive. ",
            "props": [
                {
                    "id": "aria-colcount",
                    "isRequired": false
                },
                {
                    "id": "aria-rowcount",
                    "isRequired": false
                }
            ],
            "states": []
        },
        {
            "id": "tablist",
            "description": "A list of tab elements, which are references to tabpanel elements.",
            "props": [
                {
                    "id": "aria-level",
                    "isRequired": false
                },
                {
                    "id": "aria-activedescendant",
                    "isRequired": false
                },
                {
                    "id": "aria-orientation",
                    "isRequired": false
                },
                {
                    "id": "aria-multiselectable",
                    "isRequired": false
                }
            ],
            "states": []
        },
        {
            "id": "tabpanel",
            "description": "A container for the resources associated with a tab, where each tab is contained in a tablist.",
            "props": [],
            "states": [
                {
                    "id": "aria-expanded",
                    "isRequired": false
                }
            ]
        },
        {
            "id": "term",
            "description": "A word or phrase with a corresponding definition. See related definition.",
            "props": [],
            "states": [
                {
                    "id": "aria-expanded",
                    "isRequired": false
                }
            ]
        },
        {
            "id": "textbox",
            "description": "Input that allows free-form text as its value.",
            "props": [
                {
                    "id": "aria-activedescendant",
                    "isRequired": false
                },
                {
                    "id": "aria-autocomplete",
                    "isRequired": false
                },
                {
                    "id": "aria-multiline",
                    "isRequired": false
                },
                {
                    "id": "aria-placeholder",
                    "isRequired": false
                },
                {
                    "id": "aria-readonly",
                    "isRequired": false
                },
                {
                    "id": "aria-required",
                    "isRequired": false
                }
            ],
            "states": []
        },
        {
            "id": "timer",
            "description": "A type of live region containing a numerical counter which indicates an amount of elapsed time from a start point, or the time remaining until an end point.",
            "props": [],
            "states": [
                {
                    "id": "aria-expanded",
                    "isRequired": false
                }
            ]
        },
        {
            "id": "toolbar",
            "description": "A collection of commonly used function buttons represented in compact visual form.",
            "props": [
                {
                    "id": "aria-activedescendant",
                    "isRequired": false
                },
                {
                    "id": "aria-orientation",
                    "isRequired": false
                }
            ],
            "states": [
                {
                    "id": "aria-expanded",
                    "isRequired": false
                }
            ]
        },
        {
            "id": "tooltip",
            "description": "A contextual popup that displays a description for an element.",
            "props": [],
            "states": [
                {
                    "id": "aria-expanded",
                    "isRequired": false
                }
            ]
        },
        {
            "id": "tree",
            "description": "A type of list that may contain sub-level nested groups that can be collapsed and expanded.",
            "props": [
                {
                    "id": "aria-multiselectable",
                    "isRequired": false
                },
                {
                    "id": "aria-required",
                    "isRequired": false
                },
                {
                    "id": "aria-activedescendant",
                    "isRequired": false
                },
                {
                    "id": "aria-orientation",
                    "isRequired": false
                }
            ],
            "states": [
                {
                    "id": "aria-expanded",
                    "isRequired": false
                }
            ]
        },
        {
            "id": "treegrid",
            "description": "A grid whose rows can be expanded and collapsed in the same manner as for a tree.",
            "props": [
                {
                    "id": "aria-level",
                    "isRequired": false
                },
                {
                    "id": "aria-multiselectable",
                    "isRequired": false
                },
                {
                    "id": "aria-readonly",
                    "isRequired": false
                },
                {
                    "id": "aria-activedescendant",
                    "isRequired": false
                },
                {
                    "id": "aria-required",
                    "isRequired": false
                },
                {
                    "id": "aria-orientation",
                    "isRequired": false
                },
                {
                    "id": "aria-colcount",
                    "isRequired": false
                },
                {
                    "id": "aria-rowcount",
                    "isRequired": false
                }
            ],
            "states": [
                {
                    "id": "aria-expanded",
                    "isRequired": false
                }
            ]
        },
        {
            "id": "treeitem",
            "description": "An option item of a tree. This is an element within a tree that may be expanded or collapsed if it contains a sub-level group of treeitems.",
            "props": [
                {
                    "id": "aria-level",
                    "isRequired": false
                },
                {
                    "id": "aria-posinset",
                    "isRequired": false
                },
                {
                    "id": "aria-setsize",
                    "isRequired": false
                }
            ],
            "states": [
                {
                    "id": "aria-expanded",
                    "isRequired": false
                },
                {
                    "id": "aria-checked",
                    "isRequired": false
                },
                {
                    "id": "aria-selected",
                    "isRequired": false
                }
            ]
        }
    ],
    "states": [
        {
            "id": "aria-busy",
            "type": "state",
            "valueType": "true-false",
            "description": "Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.",
            "relatedConcepts": null,
            "longDescription": "Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.\n\t\t\t\tThe default value of aria-busy is false for all elements. When aria-busy is true for an element, assistive technologies MAY ignore changes to content owned by that element and then process all changes made during the busy period as a single, atomic update when aria-busy becomes false.\n\t\t\t\tIf it is necessary to make multiple additions, modifications, or removals within a container element that is already either partially or fully rendered, authors MAY set aria-busy to true on the container element before the first change, and then set it to false when the last change is complete. For example, if multiple changes to a live region should be spoken as a single unit of speech, authors MAY set aria-busy to true while the changes are being made and then set it to false when the changes are complete and ready to be spoken.\n\t\t\t\tIf an element with role feed is marked busy, assistive technologies MAY defer rendering changes that occur inside the feed with the exception of user-initiated changes that occur inside the article that the user is reading during the busy period.\n\t\t\t\tIf changes to a rendered widget would create a state where the widget is missing required owned elements during script execution, authors MUST set aria-busy to true on the widget during the update process. For example, if a rendered tree grid required a set of simultaneous updates to multiple discontiguous branches, an alternative to replacing the complete tree element with a single update would be to mark the tree busy while each of the branches are modified.",
            "applicableRoles": [],
            "inheritsIntoRoles": []
        },
        {
            "id": "aria-checked",
            "type": "state",
            "valueType": "tristate",
            "description": "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets. See related aria-pressed and aria-selected.",
            "relatedConcepts": null,
            "longDescription": "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets. See related aria-pressed and aria-selected.\n\t\t\t\tThe aria-checked attribute indicates whether the element is checked (true), unchecked (false), or represents a group of other elements that have a mixture of checked and unchecked values (mixed). Most inputs only support values of true and false, but the mixed value is supported by certain tri-state inputs such as a checkbox or menuitemcheckbox.\n\t\t\t\tThe mixed value is not supported on radio, menuitemradio, switch or any element that inherits from these in the taxonomy, and user agents MUST treat a mixed value as equivalent to false for those roles.\n\t\t\t\tExamples using the mixed value of tri-state inputs are covered in WAI-ARIA Authoring Practices [wai-aria-practices-1.1]",
            "applicableRoles": [
                "checkbox",
                "option",
                "radio",
                "switch"
            ],
            "inheritsIntoRoles": [
                "menuitemcheckbox",
                "menuitemradio",
                "treeitem"
            ]
        },
        {
            "id": "aria-current",
            "type": "state",
            "valueType": "token",
            "description": "Indicates the element that represents the current item within a container or set of related elements.",
            "relatedConcepts": null,
            "longDescription": "Indicates the element that represents the current item within a container or set of related elements.\n\t\t\t\tThe aria-current attribute is an enumerated type. Any value not included in the list of allowed values SHOULD be treated by assistive technologies as if the value true had been provided. If the attribute is not present or its value is an empty string or undefined, the default value of false applies and the aria-current state MUST NOT be exposed by user agents or assistive technologies.\n\t\t\t\tThe aria-current attribute is used when an element within a set of related elements is visually styled to indicate it is the current item in the set. For example:\n\t\t\t\t\n\t\t\t\t\tA page token used to indicate a link within a set of pagination links, where the link is visually styled to represent the currently-displayed page.\n\t\t\t\t\tA step token used to indicate a link within a step indicator for a step-based process, where the link is visually styled to represent the current step.\n\t\t\t\t\tA location token used to indicate the image that is visually highlighted as the current component of a flow chart.\n\t\t\t\t\tA date token used to indicate the current date within a calendar.\n\t\t\t\t\tA time token used to indicate the current time within a timetable.\n\t\t\t\t\n\t\t\t\tAuthors SHOULD only mark one element in a set of elements as current with aria-current.\n\t\t\t\tAuthors SHOULD NOT use the aria-current attribute as a substitute for aria-selected in widgets where aria-selected has the same meaning. For example, in a tablist, aria-selected is used on a tab to indicate the currently-displayed tabpanel.\n\t\t\t\tNoteIn some use cases for widgets that support aria-selected, current and selected can have different meanings and can both be used within the same set of elements. For example, aria-current=\"page\" can be used in a navigation tree to indicate which page is currently displayed, while aria-selected=\"true\" indicates which page will be displayed if the user activates the treeitem. Furthermore, the same tree may support operating on one or more selected pages (treeitems) by way of a context menu containing options such as \"delete\" and \"move.\"",
            "applicableRoles": [],
            "inheritsIntoRoles": []
        },
        {
            "id": "aria-disabled",
            "type": "state",
            "valueType": "true-false",
            "description": "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly.",
            "relatedConcepts": null,
            "longDescription": "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly.\n\t\t\t\tFor example, irrelevant options in a radio group may be disabled. Disabled elements might not receive focus from the tab order. For some disabled elements, applications might choose not to support navigation to descendants. In addition to setting the aria-disabled attribute, authors SHOULD change the appearance (grayed out, etc.) to indicate that the item has been disabled.\n\t\t\t\tThe state of being disabled applies to the current element and all focusable descendant elements of the element on which the aria-disabled attribute is applied.",
            "applicableRoles": [],
            "inheritsIntoRoles": []
        },
        {
            "id": "aria-expanded",
            "type": "state",
            "valueType": "true-false-undefined",
            "description": "Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.",
            "relatedConcepts": "Tapered prompts in voice browsing. Switch in SMIL [SMIL3].",
            "longDescription": "Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.\n\t\t\t\tFor example, this indicates whether a portion of a tree is expanded or collapsed. In other instances, this may be applied to page sections to mark expandable and collapsible regions that are flexible for managing content density. Simplifying the user interface by collapsing sections may improve usability for all, including those with cognitive or developmental disabilities.\n\t\t\t\tIf the element with the aria-expanded attribute controls the expansion of another grouping container that is not 'owned by' the element, the author SHOULD reference the container by using the aria-controls attribute.",
            "applicableRoles": [
                "button",
                "combobox",
                "document",
                "link",
                "section",
                "sectionhead",
                "window"
            ],
            "inheritsIntoRoles": [
                "alert",
                "alertdialog",
                "article",
                "banner",
                "cell",
                "columnheader",
                "complementary",
                "contentinfo",
                "definition",
                "dialog",
                "directory",
                "feed",
                "figure",
                "form",
                "grid",
                "gridcell",
                "group",
                "heading",
                "img",
                "landmark",
                "list",
                "listbox",
                "listitem",
                "log",
                "main",
                "marquee",
                "math",
                "menu",
                "menubar",
                "navigation",
                "note",
                "progressbar",
                "radiogroup",
                "region",
                "row",
                "rowheader",
                "search",
                "select",
                "status",
                "tab",
                "table",
                "tabpanel",
                "term",
                "timer",
                "toolbar",
                "tooltip",
                "tree",
                "treegrid",
                "treeitem"
            ]
        },
        {
            "id": "aria-grabbed",
            "type": "state",
            "valueType": "true-false-undefined",
            "description": "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation.",
            "relatedConcepts": null,
            "longDescription": "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation.\n\t\t\t\tNoteThe aria-grabbed state is expected to be replaced by a new feature in a future version of WAI-ARIA. Authors are therefore advised to treat aria-grabbed as deprecated.\n\t\t\t\tSetting aria-grabbed to true indicates that the element has been selected for dragging. Setting aria-grabbed to false indicates that the element can be grabbed for a drag-and-drop operation, but is not currently grabbed. If aria-grabbed is unspecified or set to undefined (default), the element cannot be grabbed.\n\t\t\t\tWhen aria-grabbed is set to true, authors SHOULD update the aria-dropeffect attribute of all potential drop targets. When an element is not grabbed (the value is set to false or undefined, or the attribute is removed), authors SHOULD revert the aria-dropeffect attributes of the associated drop targets to none.",
            "applicableRoles": [],
            "inheritsIntoRoles": []
        },
        {
            "id": "aria-hidden",
            "type": "state",
            "valueType": "true-false-undefined",
            "description": "Indicates whether the element is exposed to an accessibility API. See related aria-disabled.",
            "relatedConcepts": null,
            "longDescription": "Indicates whether the element is exposed to an accessibility API. See related aria-disabled.\n\t\t\t\tUser agents determine an element's hidden status based on whether it is rendered, and the rendering is usually controlled by CSS. For example, an element whose display property is set to none is not rendered. An element is considered hidden if it, or any of its ancestors are not rendered or have their aria-hidden attribute value set to true.\n\t\t\t\tExample 20[aria-hidden=\"true\"] { visibility: hidden; }\n\t\t\t\tAuthors MAY, with caution, use aria-hidden to hide visibly rendered content from assistive technologies only if the act of hiding this content is intended to improve the experience for users of assistive technologies by removing redundant or extraneous content. Authors using aria-hidden to hide visible content from screen readers MUST ensure that identical or equivalent meaning and functionality is exposed to assistive technologies.\n\t\t\t\tNoteAuthors are advised to use extreme caution and consider a wide range of disabilities when hiding visibly rendered content from assistive technologies. For example, a sighted, dexterity-impaired individual may use voice-controlled assistive technologies to access a visual interface. If an author hides visible link text \"Go to checkout\" and exposes similar, yet non-identical link text \"Check out now\" to the accessibility API, the user may be unable to access the interface they perceive using voice control. Similar problems may also arise for screen reader users. For example, a sighted telephone support technician may attempt to have the blind screen reader user click the \"Go to checkout\" link, which they may be unable to find using a type-ahead item search (\"Go to…\").\n\t\t\t\tNoteAt the time of this writing, aria-hidden=\"false\" is known to work inconsistently in browsers. As future implementations improve, use caution and test thoroughly before relying on this approach.\n\t\t\t\tNoteIt is recommended that authors key visibility of elements off this attribute, rather than change visibility and separately update this property. CSS 2 introduced a way to select on attribute values ([css3-selectors]). The following CSS declaration makes content visible unless the aria-hidden attribute is true; scripts need only update the value of this attribute to change visibility:\n\t\t\t\tExample 21[aria-hidden=\"true\"] { visibility: hidden; }",
            "applicableRoles": [],
            "inheritsIntoRoles": []
        },
        {
            "id": "aria-invalid",
            "type": "state",
            "valueType": "token",
            "description": "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage.",
            "relatedConcepts": "XForms [XFORMS11] 'invalid' event. This state is true if a form field is required but empty. However, the XForms valid property would be set to false.",
            "longDescription": "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage.\n\t\t\t\tIf the value is computed to be invalid or out-of-range, the application author SHOULD set this attribute to true. User agents SHOULD inform the user of the error. Application authors SHOULD provide suggestions for corrections if they are known.\n\t\t\t\tWhen the user attempts to submit data involving a field for which aria-required is true, authors MAY use the aria-invalid attribute to signal there is an error. However, if the user has not attempted to submit the form, authors SHOULD NOT set the aria-invalid attribute on required widgets simply because the user has not yet entered data.\n\t\t\t\tFor future expansion, the aria-invalid attribute is an enumerated type. Any value not recognized in the list of allowed values MUST be treated by user agents as if the value true had been provided. If the attribute is not present, or its value is false, or its value is an empty string, the default value of false applies.",
            "applicableRoles": [],
            "inheritsIntoRoles": []
        },
        {
            "id": "aria-pressed",
            "type": "state",
            "valueType": "tristate",
            "description": "Indicates the current \"pressed\" state of toggle buttons. See related aria-checked and aria-selected.",
            "relatedConcepts": null,
            "longDescription": "Indicates the current \"pressed\" state of toggle buttons. See related aria-checked and aria-selected.\n\t\t\t\tToggle buttons require a full press-and-release cycle to change their value. Activating it once changes the value to true, and activating it another time changes the value back to false. A value of mixed means that the values of more than one item controlled by the button do not all share the same value. Examples of mixed-state buttons are described in WAI-ARIA Authoring Practices [wai-aria-practices-1.1]. If the attribute is not present, the button is not a toggle button.\n\t\t\t\tThe aria-pressed attribute is similar but not identical to the aria-checked attribute. Operating systems support pressed on buttons and checked on checkboxes.",
            "applicableRoles": [
                "button"
            ],
            "inheritsIntoRoles": []
        },
        {
            "id": "aria-selected",
            "type": "state",
            "valueType": "true-false-undefined",
            "description": "Indicates the current \"selected\" state of various widgets. See related aria-checked and aria-pressed.",
            "relatedConcepts": null,
            "longDescription": "Indicates the current \"selected\" state of various widgets. See related aria-checked and aria-pressed.\n\t\t\t\tThis attribute is used with single-selection and multiple-selection widgets:\n\t\t\t\t\n\t\t\t\t\tSingle-selection containers where the currently focused item is not selected. The selection normally follows the focus, and is managed by the user agent.\n\t\t\t\t\tMultiple-selection containers. Authors SHOULD ensure that any selectable descendant of a container in which the aria-multiselectable attribute is true specifies a value of either true or false for the aria-selected attribute.\n\t\t\t\t\n\t\t\t\tAny explicit assignment of aria-selected takes precedence over the implicit selection based on focus. If no DOM element in the widget is explicitly marked as selected, assistive technologies MAY convey implicit selection which follows the keyboard focus of the managed focus widget. If any DOM element in the widget is explicitly marked as selected, the user agent MUST NOT convey implicit selection for the widget.",
            "applicableRoles": [
                "gridcell",
                "option",
                "row",
                "tab"
            ],
            "inheritsIntoRoles": [
                "columnheader",
                "rowheader",
                "treeitem"
            ]
        }
    ],
    "properties": [
        {
            "id": "aria-activedescendant",
            "type": "property",
            "valueType": "idref",
            "description": "Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.",
            "relatedConcepts": "SVG [SVG2] and DOM [dom] active",
            "longDescription": "Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.\n\t\t\t\tThe aria-activedescendant property provides an alternative method of managing focus for interactive elements that may contain multiple focusable descendants, such as menus, grids, and toolbars. Instead of moving DOM focus among descendant elements, authors MAY set DOM focus on an element that supports aria-activedescendant and then use aria-activedescendant to refer to the element that is active.\n\t\t\t\t Authors MUST ensure that one of the following two sets of conditions is met when setting the value of aria-activedescendant on an element with DOM focus:\n\t\t\t\t\n\t\t\t\t\tThe value of aria-activedescendant refers to an element that is either a descendant of the element with DOM focus or is a logical descendant as indicated by the aria-owns attribute.\n\t\t\t\t\tThe element with DOM focus is a textbox with aria-controls referring to an element that supports aria-activedescendant, and the value of aria-activedescendant specified for the textbox refers to either a descendant of the element controlled by the textbox or is a logical descendant of that controlled element as indicated by the aria-owns attribute. For example, in a combobox, focus may remain on the textbox while the value of aria-activedescendant on the textbox element refers to a descendant of a popup listbox that is controlled by the textbox.\n\t\t\t\t\n\t\t\t\t Authors SHOULD also ensure that the currently active descendant is visible and in view (or scrolls into view) when focused.",
            "applicableRoles": [
                "application",
                "composite",
                "group",
                "textbox"
            ],
            "inheritsIntoRoles": [
                "combobox",
                "grid",
                "listbox",
                "menu",
                "menubar",
                "radiogroup",
                "row",
                "searchbox",
                "select",
                "spinbutton",
                "tablist",
                "toolbar",
                "tree",
                "treegrid"
            ]
        },
        {
            "id": "aria-atomic",
            "type": "property",
            "valueType": "true-false",
            "description": "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.",
            "relatedConcepts": null,
            "longDescription": "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.\n\t\t\t\tBoth accessibility APIs and the Document Object Model [dom] provide events to allow the assistive technologies to determine changed areas of the document.\n\t\t\t\tWhen the content of a live region changes, user agents SHOULD examine the changed element and traverse the ancestors to find the first element with aria-atomic set, and apply the appropriate behavior for the cases below.\n\t\t\t\t\n\t\t\t\t\tIf none of the ancestors have explicitly set aria-atomic, the default is that aria-atomic is false, and assistive technologies will only present the changed node to the user.\n\t\t\t\t\tIf aria-atomic is explicitly set to false, assistive technologies will stop searching up the ancestor chain and present only the changed node to the user.\n\t\t\t\t\tIf aria-atomic is explicitly set to true, assistive technologies will present the entire contents of the element, including the author-defined live region label if one exists.\n\t\t\t\t\n\t\t\t\tWhen aria-atomic is true, assistive technologies MAY choose to combine several changes and present the entire changed region at once.",
            "applicableRoles": [],
            "inheritsIntoRoles": []
        },
        {
            "id": "aria-autocomplete",
            "type": "property",
            "valueType": "token",
            "description": "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be presented if they are made.",
            "relatedConcepts": "XForms selection attribute in select",
            "longDescription": "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be presented if they are made.\n\t\t\t\tThe aria-autocomplete property describes the type of interaction model a textbox, searchbox, or combobox employs when dynamically helping users complete text input. It distinguishes between two models: the inline model (aria-autocomplete=\"inline\") that presents a value completion prediction inside the text input and the list model (aria-autocomplete=\"list\") that presents a collection of possible values in a separate element that pops up adjacent to the text input. It is possible for an input to offer both models at the same time (aria-autocomplete=\"both\").\n\t\t\t\tThe aria-autocomplete property is limited to describing predictive behaviors of an input element. Authors SHOULD either omit specifying a value for aria-autocomplete or set aria-autocomplete to none if an input element provides one or more input proposals where none of the proposals are dependent on the specific input provided by the user. For instance, a combobox where the value of aria-autocomplete would be none is a search field that displays suggested values by listing the 5 most recently used search terms without any filtering of the list based on the user's input. Elements with a role that supports aria-autocomplete have a default value for aria-autocomplete of none.\n\t\t\t\tWhen an inline suggestion is made as a user types in an input, suggested text for completing the value of the field dynamically appears in the field after the input cursor, and the suggested value is accepted as the value of the input if the user performs an action that causes focus to leave the field. When an element has aria-autocomplete set to inline or both, authors SHOULD ensure that the automatically suggested portion of the text is presented as selected text. This enables assistive technologies to distinguish between a user's input and the automatic suggestion and, in the event that the suggestion is not the desired value, enables the user to easily delete the suggestion or replace it by continuing to type.\n\t\t\t\t If an element has aria-autocomplete set to list or both, authors MUST ensure both of the following conditions are met:\n\t\t\t\t\n\t\t\t\t\tThe element has a value specified for aria-controls that refers to the element that contains the collection of suggested values.\n\t\t\t\t\tEither the element or a containing element with role combobox has a value for aria-haspopup that matches the role of the element that contains the collection of suggested values.\n\t\t\t\t\n\t\t\t\tSome implementations of the list model require the user to perform an action, such as moving focus to the suggestion with the Down Arrow or clicking on the suggestion, in order to choose the suggestion. In such implementations, authors MAY manage focus by either using aria-activedescendant if the collection container supports it or by moving DOM focus to the suggestion. However, other implementations of the list model automatically highlight one suggestion as the selected value that will be accepted when the field loses focus, e.g., when the user presses the Tab key or clicks on a different field. If an element has aria-autocomplete set to list or both, and if a suggestion is automatically selected as the user provides input, authors MUST ensure all the following conditions are met:\n\t\t\t\t\n\t\t\t\t\tThe collection of suggestions is presented in an element with a role that supports aria-activedescendant.\n\t\t\t\t\tThe value of aria-activedescendant set on the input field is dynamically adjusted to refer to the element containing the selected suggestion as described in the definition of aria-activedescendant.\n\t\t\t\t\tDOM focus remains on the text input while the suggestions are displayed.\n\t\t\t\t\n\t\t\t\tThe aria-autocomplete property is not intended to indicate the presence of a completion suggestion, and authors SHOULD NOT dynamically change its value in order to communicate the presence of a suggestion. When an element has aria-autocomplete set to list or both, authors SHOULD use the aria-expanded state to communicate whether the element that presents the suggestion collection is displayed.",
            "applicableRoles": [
                "combobox",
                "textbox"
            ],
            "inheritsIntoRoles": [
                "searchbox"
            ]
        },
        {
            "id": "aria-colcount",
            "type": "property",
            "valueType": "integer",
            "description": "Defines the total number of columns in a table, grid, or treegrid. See related aria-colindex.",
            "relatedConcepts": null,
            "longDescription": "Defines the total number of columns in a table, grid, or treegrid. See related aria-colindex.\n\t\t\t\tIf all of the columns are present in the DOM, it is not necessary to set this attribute as the user agent can automatically calculate the total number of columns. However, if only a portion of the columns is present in the DOM at a given moment, this attribute is needed to provide an explicit indication of the number of columns in the full table.\n\t\t\t\tAuthors MUST set the value of aria-colcount to an integer equal to the number of columns in the full table. If the total number of columns is unknown, authors MUST set the value of aria-colcount to -1 to indicate that the value should not be calculated by the user agent.\n\t\t\t\tThe following example shows a grid with 16 columns, of which columns 2, 3, 4, and 9 are displayed to the user.\n\t\t\t\tExample 13<div role=\"grid\" aria-colcount=\"16\">\n  <div role=\"rowgroup\">\n    <div role=\"row\">\n      <span role=\"columnheader\" aria-colindex=\"2\">First Name</span>\n      <span role=\"columnheader\" aria-colindex=\"3\">Last Name</span>\n      <span role=\"columnheader\" aria-colindex=\"4\">Company</span>\n      <span role=\"columnheader\" aria-colindex=\"9\">Phone</span>\n    </div>\n  </div>\n  <div role=\"rowgroup\">\n    <div role=\"row\">\n      <span role=\"gridcell\" aria-colindex=\"2\">Fred</span>\n      <span role=\"gridcell\" aria-colindex=\"3\">Jackson</span>\n      <span role=\"gridcell\" aria-colindex=\"4\">Acme, Inc.</span>\n      <span role=\"gridcell\" aria-colindex=\"9\">555-1234</span>\n    </div>\n    <div role=\"row\">\n      <span role=\"gridcell\" aria-colindex=\"2\">Sara</span>\n      <span role=\"gridcell\" aria-colindex=\"3\">James</span>\n      <span role=\"gridcell\" aria-colindex=\"4\">Acme, Inc.</span>\n      <span role=\"gridcell\" aria-colindex=\"9\">555-1235</span>\n    </div>\n   …\n  </div>\n</div>",
            "applicableRoles": [
                "table"
            ],
            "inheritsIntoRoles": [
                "grid",
                "treegrid"
            ]
        },
        {
            "id": "aria-colindex",
            "type": "property",
            "valueType": "integer",
            "description": "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid. See related aria-colcount and aria-colspan.",
            "relatedConcepts": null,
            "longDescription": "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid. See related aria-colcount and aria-colspan.\n\t\t\t\tIf all of the columns are present in the DOM, it is not necessary to set this attribute as the user agent can automatically calculate the column index of each cell or gridcell. However, if only a portion of the columns is present in the DOM at a given moment, this attribute is needed to provide an explicit indication of the column of each cell or gridcell with respect to the full table.\n\t\t\t\tAuthors MUST set the value for aria-colindex to an integer greater than or equal to 1, greater than the aria-colindex value of any previous elements within the same row, and less than or equal to the number of columns in the full table. For a cell or gridcell which spans multiple columns, authors MUST set the value of aria-colindex to the start of the span.\n\t\t\t\tIf the set of columns which is present in the DOM is contiguous, and if there are no cells which span more than one row or column in that set, then authors MAY place aria-colindex on each row, setting the value to the index of the first column of the set. Otherwise, authors SHOULD place aria-colindex on all of the children or owned elements of each row.\n\t\t\t\tThe following example shows a grid with 16 columns, of which columns 2 through 5 are displayed to the user. Because the set of columns is contiguous, aria-colindex can be placed on each row.\n\t\t\t\tExample 14<div role=\"grid\" aria-colcount=\"16\">\n  <div role=\"rowgroup\">\n    <div role=\"row\" aria-colindex=\"2\">\n      <span role=\"columnheader\">First Name</span>\n      <span role=\"columnheader\">Last Name</span>\n      <span role=\"columnheader\">Company</span>\n      <span role=\"columnheader\">Address</span>\n    </div>\n  </div>\n  <div role=\"rowgroup\">\n    <div role=\"row\" aria-colindex=\"2\">\n      <span role=\"gridcell\">Fred</span>\n      <span role=\"gridcell\">Jackson</span>\n      <span role=\"gridcell\">Acme, Inc.</span>\n      <span role=\"gridcell\">123 Broad St.</span>\n    </div>\n    <div role=\"row\" aria-colindex=\"2\">\n      <span role=\"gridcell\">Sara</span>\n      <span role=\"gridcell\">James</span>\n      <span role=\"gridcell\">Acme, Inc.</span>\n      <span role=\"gridcell\">123 Broad St.</span>\n    </div>\n   …\n  </div>\n</div>\n\t\t\t\tThe following example shows a grid with 16 columns, of which columns 2 through 5 are displayed to the user. While the set of columns is contiguous, some of the cells span multiple rows. As a result, aria-colindex needs to be placed on all of the owned elements of each row.\n\t\t\t\tExample 15<div role=\"grid\" aria-colcount=\"16\">\n  <div role=\"rowgroup\">\n    <div role=\"row\">\n      <span role=\"columnheader\" aria-colindex=\"2\">First Name</span>\n      <span role=\"columnheader\" aria-colindex=\"3\">Last Name</span>\n      <span role=\"columnheader\" aria-colindex=\"4\">Company</span>\n      <span role=\"columnheader\" aria-colindex=\"5\">Address</span>\n    </div>\n  </div>\n  <div role=\"rowgroup\">\n    <div role=\"row\">\n      <span role=\"gridcell\" aria-colindex=\"2\">Fred</span>\n      <span role=\"gridcell\" aria-colindex=\"3\">Jackson</span>\n      <span role=\"gridcell\" aria-colindex=\"4\" aria-rowspan=\"2\">Acme, Inc.</span>\n      <span role=\"gridcell\" aria-colindex=\"5\" aria-rowspan=\"2\">123 Broad St.</span>\n    </div>\n    <div role=\"row\">\n      <span role=\"gridcell\" aria-colindex=\"2\">Sara</span>\n      <span role=\"gridcell\" aria-colindex=\"3\">James</span>\n    </div>\n   …\n  </div>\n</div>\n\t\t\t\tThe following example shows a grid with 16 columns, of which columns 2, 3, 4, and 9 are displayed to the user. Because the set of columns is non-contiguous, aria-colindex needs to be placed on all of the owned elements of each row.\n\t\t\t\tExample 16<div role=\"grid\" aria-colcount=\"16\">\n  <div role=\"rowgroup\">\n    <div role=\"row\">\n      <span role=\"columnheader\" aria-colindex=\"2\">First Name</span>\n      <span role=\"columnheader\" aria-colindex=\"3\">Last Name</span>\n      <span role=\"columnheader\" aria-colindex=\"4\">Company</span>\n      <span role=\"columnheader\" aria-colindex=\"9\">Phone</span>\n    </div>\n  </div>\n  <div role=\"rowgroup\">\n    <div role=\"row\">\n      <span role=\"gridcell\" aria-colindex=\"2\">Fred</span>\n      <span role=\"gridcell\" aria-colindex=\"3\">Jackson</span>\n      <span role=\"gridcell\" aria-colindex=\"4\">Acme, Inc.</span>\n      <span role=\"gridcell\" aria-colindex=\"9\">555-1234</span>\n    </div>\n    <div role=\"row\">\n      <span role=\"gridcell\" aria-colindex=\"2\">Sara</span>\n      <span role=\"gridcell\" aria-colindex=\"3\">James</span>\n      <span role=\"gridcell\" aria-colindex=\"4\">Acme, Inc.</span>\n      <span role=\"gridcell\" aria-colindex=\"9\">555-1235</span>\n    </div>\n   …\n  </div>\n</div>",
            "applicableRoles": [
                "cell",
                "row"
            ],
            "inheritsIntoRoles": [
                "columnheader",
                "gridcell",
                "rowheader"
            ]
        },
        {
            "id": "aria-colspan",
            "type": "property",
            "valueType": "integer",
            "description": "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-colindex and aria-rowspan.",
            "relatedConcepts": null,
            "longDescription": "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-colindex and aria-rowspan.\n\t\t\t\tThis attribute is intended for cells and gridcells which are not contained in a native table. When defining the column span of cells or gridcells in a native table, authors SHOULD use the host language's attribute instead of aria-colspan. If aria-colspan is used on an element for which the host language provides an equivalent attribute, user agents MUST ignore the value of aria-colspan and instead expose the value of the host language's attribute to assistive technologies.\n\t\t\t\tAuthors MUST set the value of aria-colspan to an integer greater than or equal to 1 and less than the value which would cause the cell or gridcell to overlap the next cell or gridcell in the same row.",
            "applicableRoles": [
                "cell"
            ],
            "inheritsIntoRoles": [
                "columnheader",
                "gridcell",
                "rowheader"
            ]
        },
        {
            "id": "aria-controls",
            "type": "property",
            "valueType": "idref_list",
            "description": "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns.",
            "relatedConcepts": null,
            "longDescription": "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns.\n\t\t\t\tFor example:\n\t\t\t\t\n\t\t\t\t\tA table of contents tree view may control the content of a neighboring document pane.\n\t\t\t\t\tA group of checkboxes may control what commodity prices are tracked live in a table or graph.\n\t\t\t\t\tA tab controls the display of its associated tab panel.",
            "applicableRoles": [],
            "inheritsIntoRoles": []
        },
        {
            "id": "aria-describedby",
            "type": "property",
            "valueType": "idref_list",
            "description": "Identifies the element (or elements) that describes the object. See related aria-labelledby.",
            "relatedConcepts": "Hint or Help in XForms [XFORMS10]\n\t\t\t\t\t\t\t\tLabel in XForms\n\t\t\t\t\t\t\t\tLabel in HTML [xhtml11]\n\t\t\t\t\t\t\t\tonline help\n\t\t\t\t\t\t\t\tHTML table cell headers",
            "longDescription": "Identifies the element (or elements) that describes the object. See related aria-labelledby.\n\t\t\t\tThe aria-labelledby attribute is similar to the aria-describedby in that both reference other elements to calculate a text alternative, but a label should be concise, where a description is intended to provide more verbose information.\n\t\t\t\t\n\t\t\t\tThe element or elements referenced by the aria-describedby comprise the entire description. Include ID references to multiple elements if necessary, or enclose a set of elements (e.g., paragraphs) with the element referenced by the ID.",
            "applicableRoles": [],
            "inheritsIntoRoles": []
        },
        {
            "id": "aria-details",
            "type": "property",
            "valueType": "idref",
            "description": "Identifies the element that provides a detailed, extended description for the object. See related aria-describedby.",
            "relatedConcepts": null,
            "longDescription": "Identifies the element that provides a detailed, extended description for the object. See related aria-describedby.\n\t\t\t\tThe aria-details attribute references a single element that provides more detailed information than would normally be provided by aria-describedby. It enables assistive technologies to make users aware of the availability of an extended description as well as navigate to it. Authors SHOULD ensure the element referenced by aria-details is visible to all users.\n\t\t\t\tUnlike elements referenced by aria-describedby, the element referenced by aria-details is not used in either the Accessible Name Computation or the Accessible Description Computation as defined in the Accessible Name and Description specification [accname-aam-1.1]. Thus, the content of an element referenced by aria-details is not flattened to a string when presented to assistive technology users. This makes aria-details particularly useful when converting the information to a string would cause a loss of information or make the extended description more difficult to understand.\n\t\t\t\tIn some user agents, multiple reference relationships for descriptive information are not supported by the accessibility API. In such cases, if both aria-describedby and aria-details are provided on an element, aria-details takes precedence.\n\t\t\t\tA common use for aria-details is in digital publishing where an extended description needs to be conveyed in a book that requires structural markup or the embedding of other technology to provide illustrative content. The following example demonstrates this scenario.\n\t\t\t\tExample 17<!-- Provision of an extended description -->\n<img src=\"pythagorean.jpg\" alt=\"Pythagorean Theorem\" aria-details=\"det\">\n<details id=\"det\">\n  <summary>Example</summary>\n  <p>\n    The Pythagorean Theorem is a relationship in Euclidean Geometry between the three sides of\n    a right triangle, where the square of the hypotenuse is the sum of the squares of the two\n    opposing sides.\n  </p>\n  <p>\n    The following drawing illustrates an application of the Pythagorean Theorem when used to\n    construct a skateboard ramp.\n  </p>\n  <object data=\"skatebd-ramp.svg\"  type=\"image/svg+xml\"/>\n  <p>\n    In this example you will notice a skateboard with a base and vertical board whose width\n    is the width of the ramp. To compute how long the ramp must be, simply calculate the\n    base length, square it, sum it with the square of the height of the ramp, and take the\n    square root of the sum.\n  </p>\n</details>\n\t\t\t\tAlternatively, aria-details may refer to a link to a web page having the extended description, as shown in the following example.\n\t\t\t\tExample 18<!-- Provision of an extended description -->\n<img src=\"pythagorean.jpg\" alt=\"Pythagorean Theorem\" aria-details=\"det\">\n<p>\n  See an <a href=\"http://foo.com/pt.html\" id=\"det\">Application of the Pythagorean Theorem</a>.\n</p>",
            "applicableRoles": [],
            "inheritsIntoRoles": []
        },
        {
            "id": "aria-dropeffect",
            "type": "property",
            "valueType": "token_list",
            "description": "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target.",
            "relatedConcepts": null,
            "longDescription": "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target.\n\t\t\t  NoteThe aria-dropeffect property is expected to be replaced by a new feature in a future version of WAI-ARIA. Authors are therefore advised to treat aria-dropeffect as deprecated.\n\t\t\t  This property allows assistive technologies to convey the possible drag options available to users, including whether a pop-up menu of choices is provided by the application. Typically, drop effect functions can only be provided once an object has been grabbed for a drag operation as the drop effect functions available are dependent on the object being dragged.\n\t\t\t\tMore than one drop effect may be supported for a given element. Therefore, the value of this attribute is a space-delimited set of tokens indicating the possible effects, or none if there is no supported operation. In addition to setting the aria-dropeffect attribute, authors SHOULD show a visual indication of potential drop targets.",
            "applicableRoles": [],
            "inheritsIntoRoles": []
        },
        {
            "id": "aria-errormessage",
            "type": "property",
            "valueType": "idref",
            "description": "Identifies the element that provides an error message for the object.  See related aria-invalid and aria-describedby.",
            "relatedConcepts": null,
            "longDescription": "Identifies the element that provides an error message for the object.  See related aria-invalid and aria-describedby. \n\t\t\t\tThe aria-errormessage attribute references another element that contains custom error message text. Authors MUST use aria-invalid in conjunction with aria-errormessage. Initially, the object is in a valid state and either has aria-invalid set to false or no aria-invalid attribute, and the element referenced by aria-errormessage is not applicable.  If the user enters an invalid value for the object, aria-invalid is set to true to indicate that aria-errormessage is now pertinent. When aria-errormessage is pertinent, authors MUST ensure the content is not hidden and is included in a container that exposes the content to the user as it is expected that the assistive technology user will navigate to the content in order to access it.\n\t\t\t\tAuthors MAY use live regions for the error message element applying either an aria-live property or using one of the live region roles, for example, alert.  A live region scenario is when an error message is displayed to users only after they have provided invalid information.  The message describes what is wrong and advises users as to what is required.  For example, an error message might be, \"Invalid time:  the time must be between 9:00 AM and 5:00 PM\".  The following example shows the markup for the initial valid state and for the subsequent invalid state.  Note the changes to aria-invalid on the text input object, and to aria-live on the element containing the text of the error message:\n\t\t\t\tExample 19<!-- Initial valid state -->\n<label for=\"startTime\"> Please enter a start time for the meeting: </label>\n<input id=\"startTime\" type=\"text\" aria-errormessage=\"msgID\" value=\"\" aria-invalid=\"false\">\n<span id=\"msgID\" aria-live=\"off\" style=\"visibility:hidden\"> Invalid time:  the time must be between 9:00 AM and 5:00 PM\" </span>\n\n<!-- User has input an invalid value -->\n<label for=\"startTime\"> Please enter a start time for the meeting: </label>\n<input id=\"startTime\" type=\"text\" aria-errormessage=\"msgID\" aria-invalid=\"true\" value=\"11:30 PM\" >\n<span id=\"msgID\" aria-live=\"assertive\" style=\"visibility:visible\"> Invalid time:  the time must be between 9:00 AM and 5:00 PM\" </span>",
            "applicableRoles": [],
            "inheritsIntoRoles": []
        },
        {
            "id": "aria-flowto",
            "type": "property",
            "valueType": "idref_list",
            "description": "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order.",
            "relatedConcepts": null,
            "longDescription": "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order.\n\t\t\t\tWhen aria-flowto has a single IDREF, it allows assistive technologies to, at the user's request, forego normal document reading order and go to the targeted object.  However, when aria-flowto is provided with multiple IDREFS, assistive technologies SHOULD present the referenced elements as path choices.\n\t\t\t\tIn the case of one or more IDREFS, user agents or assistive technologies SHOULD give the user the option of navigating to any of the targeted elements. The name of the path can be determined by the name of the target element of the aria-flowto attribute. Accessibility APIs can provide named path relationships.",
            "applicableRoles": [],
            "inheritsIntoRoles": []
        },
        {
            "id": "aria-haspopup",
            "type": "property",
            "valueType": "token",
            "description": "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.",
            "relatedConcepts": "aria-controls\n\t\t\t\t\t\t\t\tUser Agent Accessibility Guidelines [UAAG10] conditional content",
            "longDescription": "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.\n\t\t\t\tA popup element usually appears as a block of content that is on top of other content. Authors MUST ensure that the role of the element that serves as the container for the popup content is menu, listbox, tree, grid, or dialog, and that the value of aria-haspopup matches the role of the popup container.\n        For the popup element to be keyboard accessible, authors SHOULD ensure that the element that can trigger the popup is focusable, that there is a keyboard mechanism for opening the popup, and that the popup element manages focus of all its descendants as described in Managing Focus.\n        The aria-haspopup property is an enumerated type. User agents MUST treat any value of aria-haspopup that is not included in the list of allowed values, including an empty string, as if the value false had been provided. To provide backward compatibility with ARIA 1.0 content, user agents MUST treat an aria-haspopup value of true as equivalent to a value of menu.\n        Assistive technologies SHOULD NOT expose the aria-haspopup property if it has a value of false.\n        NoteA tooltip is not considered to be a popup in this context.",
            "applicableRoles": [],
            "inheritsIntoRoles": []
        },
        {
            "id": "aria-keyshortcuts",
            "type": "property",
            "valueType": "string",
            "description": "Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.",
            "relatedConcepts": "Keyboard shortcut",
            "longDescription": "Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.\n\t\t\t\tThe value of the aria-keyshortcuts attribute is a space-delimited list of keyboard shortcuts that can be pressed to activate a command or textbox widget. The keys defined in the shortcuts represent the physical keys pressed and not the actual characters generated. Each keyboard shortcut consists of one or more tokens delimited by the plus sign (\"+\") representing zero or more modifier keys and exactly one non-modifier key that must be pressed simultaneously to activate the given shortcut.\n\t\t\t\tAuthors MUST specify modifier keys exactly according to the UI Events KeyboardEvent key Values spec [uievents-key] - for example, \"Alt\", \"Control\", \"Shift\", \"Meta\", or \"AltGraph\". Note that Meta corresponds to the Command key, and Alt to the Option key, on Apple computers.\n\t\t\t\tThe valid names for non-modifier keys are any printable character such as \"A\", \"B\", \"1\", \"2\", \"$\", \"Plus\" for a plus sign, \"Space\" for the spacebar, or the names of any other non-modifier key specified in the UI Events KeyboardEvent key Values spec [uievents-key] - for example, \"Enter\", \"Tab\", \"ArrowRight\", \"PageDown\", \"Escape\", or \"F1\". The use of \"Space\" for the spacebar is an exception to the UI Events KeyboardEvent key Values spec [uievents-key] as the space or spacebar key is encoded as ' ' and would be treated as a whitespace character.\n\t\t\t\tAuthors MUST ensure modifier keys come first when they are part of a keyboard shortcut. Authors MUST ensure that required non-modifier keys come last when they are part of a shortcut. The order of the modifier keys is not otherwise significant, so \"Alt+Shift+T\" and \"Shift+Alt+T\" are equivalent, but \"T+Shift+Alt\" is not valid because all of the modifier keys don't come first, and \"Alt\" is not valid because it doesn't include at least one non-modifier key.\n\t\t\t\tWhen specifying an alphabetic key, both the uppercase and lowercase variants are considered equivalent: \"a\" and \"A\" are the same.\n                                When implementing keyboard shortcuts authors should consider the keyboards they intend to support to avoid unintended results. Keyboard designs vary significantly based on the device used and the languages supported. For example, many modifier keys are used in conjunction with other keys to create common punctuation symbols, create number characters, swap keyboard sides on bilingual keyboards to switch languages, and perform a number of other functions.\n\t\t\t\tFor many supported keyboards, authors can prevent conflicts by avoiding keys other than ASCII letters, as number characters and common punctuation often require modifiers. Here, the keyboard shortcut entered does not equate to the key generated. For example, in French keyboard layouts, the number characters are not available until you press the Control key, so a keyboard shortcut defined as \"Control+2\" would be ambiguous as this is how one would type the \"2\" character on a French keyboard.\n\t\t\t\tIf the character used is determined by a modifier key, the author MUST specify the actual key used to generate the character, that is generated by the key, and not the resulting character. This convention enables the assistive technology to accurately convey what keys must be used to generate the shortcut. For example, on most U.S. English keyboards, the percent sign \"%\" can be input by pressing Shift+5. The correct way to specify this shortcut is \"Shift+5\". It is incorrect to specify \"%\" or \"Shift+%\". However, note that on some international keyboards the percent sign may be an unmodified key, in which case \"%\" and \"Shift+%\" could be correct on those keyboards.\n\t\t\t\tIf the key that needs to be specified is illegal in the host language or would cause a string to be terminated, authors MUST use the string escaping sequence of the host language to specify it. For example, the double-quote character can be encoded as \"Shift+&#39;\" in HTML.\n\t\t\t\tExamples of valid keyboard shortcuts include:\n\t\t\t\t\n\t\t\t\t\t\"A\"\n\t\t\t\t\t\"Shift+Space\"\n\t\t\t\t\t\"Control+Alt+.\"\n\t\t\t\t\t\"Control+Shift+&#39;\"\n\t\t\t\t\t\"Alt+Shift+P Control+F\"\n\t\t\t\t\t\"Meta+C Meta+Shift+C\"\n\t\t\t\t\n\t\t\t\tUser agents MUST NOT change keyboard behavior in response to the aria-keyshortcuts attribute. Authors MUST handle scripted keyboard events to process aria-keyshortcuts. The aria-keyshortcuts attribute exposes the existence of these shortcuts so that assistive technologies can communicate this information to users.\n\t\t\t\tAuthors SHOULD provide a way to expose keyboard shortcuts so that all users may discover them, such as through the use of a tooltip. Authors MUST ensure that aria-keyshortcuts applied to disabled elements are unavailable.\n\t\t\t\tAuthors SHOULD avoid implementing shortcut keys that inhibit operating system, user agent, or assistive technology functionality. This requires the author to carefully consider both which keys to assign and the contexts and conditions in which the keys are available to the user. For guidance, see the keyboard shortcuts section of the WAI-ARIA Authoring Practices Guide [wai-aria-practices-1.1].",
            "applicableRoles": [],
            "inheritsIntoRoles": []
        },
        {
            "id": "aria-label",
            "type": "property",
            "valueType": "string",
            "description": "Defines a string value that labels the current element. See related aria-labelledby.",
            "relatedConcepts": "HTML title",
            "longDescription": "Defines a string value that labels the current element. See related aria-labelledby.\n\t\t\t\tThe purpose of aria-label is the same as that of aria-labelledby. It provides the user with a recognizable name of the object. The most common accessibility API mapping for a label is the accessible name property.\n\t\t\t\tIf the label text is visible on screen, authors SHOULD use aria-labelledby and SHOULD NOT use aria-label. There may be instances where the name of an element cannot be determined programmatically from the content of the element, and there are cases where providing a visible label is not the desired user experience. Most host languages provide an attribute that could be used to name the element (e.g., the title attribute in HTML), yet this could present a browser tooltip. In the cases where a visible label or visible tooltip is undesirable, authors MAY set the accessible name of the element using aria-label. As required by the text alternative computation, user agents give precedence to aria-labelledby over aria-label when computing the accessible name property.",
            "applicableRoles": [],
            "inheritsIntoRoles": []
        },
        {
            "id": "aria-labelledby",
            "type": "property",
            "valueType": "idref_list",
            "description": "Identifies the element (or elements) that labels the current element. See related aria-describedby.",
            "relatedConcepts": "HTML label",
            "longDescription": "Identifies the element (or elements) that labels the current element. See related aria-describedby.\n\t\t\t\tThe purpose of aria-labelledby is the same as that of aria-label. It provides the user with a recognizable name of the object. The most common accessibility API mapping for a label is the accessible name property.\n\t\t\t\tIf the interface is such that it is not possible to have a visible label on the screen, authors SHOULD use aria-label and SHOULD NOT use aria-labelledby. As required by the text alternative computation, user agents give precedence to aria-labelledby over aria-label when computing the accessible name property.\n\t\t\t\tThe aria-labelledby attribute is similar to aria-describedby in that both reference other elements to calculate a text alternative, but a label should be concise, where a description is intended to provide more verbose information.\n\t\t\t\t\n\t\t\t\tNoteThe expected spelling of this property in U.S. English is \"labeledby.\" However, the accessibility API features to which this property is mapped have established the \"labelledby\" spelling. This property is spelled that way to match the convention and minimize the difficulty for developers.",
            "applicableRoles": [],
            "inheritsIntoRoles": []
        },
        {
            "id": "aria-level",
            "type": "property",
            "valueType": "integer",
            "description": "Defines the hierarchical level of an element within a structure.",
            "relatedConcepts": null,
            "longDescription": "Defines the hierarchical level of an element within a structure.\n\t\t\t\tThis can be applied inside trees to tree items, to headings inside a document, to nested grids, nested tablists and to other structural items that may appear inside a container or participate in an ownership hierarchy. The value for aria-level is an integer greater than or equal to 1.\n\t\t\t\tLevels increase with depth. If the DOM ancestry does not accurately represent the level, authors SHOULD explicitly define the aria-level attribute.\n\t\t\t\tThis attribute is applied to elements that act as leaf nodes within the orientation of the set, for example, on elements with role treeitem rather than elements with role group. This means that multiple elements in a set may have the same value for this attribute. Although it would be less repetitive to provide a single value on the container, restricting this to leaf nodes ensures that there is a single way for assistive technologies to use the attribute.\n\t\t\t\tIf the DOM ancestry accurately represents the level, the user agent can calculate the level of an item from the document structure. This attribute can be used to provide an explicit indication of the level when that is not possible to calculate from the document structure or the aria-owns attribute. User agent support for automatic calculation of level may vary; authors SHOULD test with user agents and assistive technologies to determine whether this attribute is needed. If the author intends for the user agent to calculate the level, the author SHOULD omit this attribute.\n                Note In the case of a treegrid, aria-level is supported on elements with the role row, not elements with role gridcell. At first glance, this may seem inconsistent with the application of aria-level on treeitem elements, but it is consistent in that the row acts as the leaf node within the vertical orientation of the grid, whereas the gridcell is a leaf node within the horizontal orientation of each row. Level is not supported on sets of cells within rows, so the aria-level attribute is applied to the element with the role row.",
            "applicableRoles": [
                "grid",
                "heading",
                "listitem",
                "row",
                "tablist"
            ],
            "inheritsIntoRoles": [
                "treegrid",
                "treeitem"
            ]
        },
        {
            "id": "aria-live",
            "type": "property",
            "valueType": "token",
            "description": "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.",
            "relatedConcepts": null,
            "longDescription": "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.\n\t\t\t\tThe values of this attribute are expressed in degrees of importance. When regions are specified as polite, assistive technologies will notify users of updates but generally do not interrupt the current task, and updates take low priority. When regions are specified as assertive, assistive technologies will immediately notify the user, and could potentially clear the speech queue of previous updates.\n\t\t\t\tPoliteness levels are essentially an ordering mechanism for updates and serve as a strong suggestion to user agents or assistive technologies. The value may be overridden by user agents, assistive technologies, or the user. For example, if assistive technologies can determine that a change occurred in response to a key press or a mouse click, the assistive technologies may present that change immediately even if the value of the aria-live attribute states otherwise.\n\t\t\t\tSince different users have different needs, it is up to the user to tweak his or her assistive technologies' response to a live region with a certain politeness level from the commonly defined baseline. Assistive technologies may choose to implement increasing and decreasing levels of granularity so that the user can exercise control over queues and interruptions.\n\t\t\t\tWhen the property is not set on an object that needs to send updates, the politeness level is the value of the nearest ancestor that sets the aria-live attribute.\n\t\t\t\tThe aria-live attribute is the primary determination for the order of presentation of changes to live regions. Implementations will also consider the default level of politeness in a role when the aria-live attribute is not set in the ancestor chain (e.g., log changes are polite by default). Items which are assertive will be presented immediately, followed by polite items. User agents or assistive technologies MAY choose to clear queued changes when an assertive change occurs. (e.g., changes in an assertive region may remove all currently queued changes)\n\t\t\t\tWhen live regions are marked as polite, assistive technologies SHOULD announce updates at the next graceful opportunity, such as at the end of speaking the current sentence or when the user pauses typing. When live regions are marked as assertive, assistive technologies SHOULD notify the user immediately. Because an interruption may disorient users or cause them to not complete their current task, authors SHOULD NOT use the assertive value unless the interruption is imperative.",
            "applicableRoles": [],
            "inheritsIntoRoles": []
        },
        {
            "id": "aria-modal",
            "type": "property",
            "valueType": "true-false",
            "description": "Indicates whether an element is modal when displayed.",
            "relatedConcepts": null,
            "longDescription": "Indicates whether an element is modal when displayed.\n\t\t\t\tThe aria-modal attribute is used to indicate that the presence of a \"modal\" element precludes usage of other content on the page. For example, when a modal dialog is displayed, it is expected that the user's interaction is limited to the contents of the dialog, until the modal dialog loses focus or is no longer displayed.\n\t\t\t\tWhen a modal element is displayed, assistive technologies SHOULD navigate to the element unless focus has explicitly been set elsewhere. Assistive technologies MAY limit navigation to the modal element's contents. If focus moves to an element outside the modal element, assistive technologies SHOULD NOT limit navigation to the modal element.\n\t\t\t\tWhen a modal element is displayed, authors MUST ensure the interface can be controlled using only descendants of the modal element. In other words, if a modal dialog has a close button, the button should be a descendant of the dialog. When a modal element is displayed, authors SHOULD mark all other contents as inert (such as \"inert subtrees\" in HTML) if the ability to do so exists in the host language.",
            "applicableRoles": [
                "window"
            ],
            "inheritsIntoRoles": [
                "alertdialog",
                "dialog"
            ]
        },
        {
            "id": "aria-multiline",
            "type": "property",
            "valueType": "true-false",
            "description": "Indicates whether a text box accepts multiple lines of input or only a single line.",
            "relatedConcepts": null,
            "longDescription": "Indicates whether a text box accepts multiple lines of input or only a single line.\n\t\t\t\t\n\t\t\t\tNoteIn most user agent implementations, the default behavior of the ENTER or RETURN key is different between the single-line and multi-line text fields in HTML. When user has focus in a single-line <input type=\"text\"> element, the keystroke usually submits the form. When user has focus in a multi-line <textarea> element, the keystroke inserts a line break. The WAI-ARIA textbox role differentiates these types of boxes with the aria-multiline attribute, so authors are advised to be aware of this distinction when designing the field.",
            "applicableRoles": [
                "textbox"
            ],
            "inheritsIntoRoles": [
                "searchbox"
            ]
        },
        {
            "id": "aria-multiselectable",
            "type": "property",
            "valueType": "true-false",
            "description": "Indicates that the user may select more than one item from the current selectable descendants.",
            "relatedConcepts": null,
            "longDescription": "Indicates that the user may select more than one item from the current selectable descendants.\n\t\t\t\tAuthors SHOULD ensure that selected descendants have the aria-selected attribute set to true, and selectable descendant have the aria-selected attribute set to false. Authors SHOULD NOT use the aria-selected attribute on descendants that are not selectable.\n\t\t\t\tNoteLists and trees are examples of roles that might allow users to select more than one item at a time.",
            "applicableRoles": [
                "grid",
                "listbox",
                "tablist",
                "tree"
            ],
            "inheritsIntoRoles": [
                "treegrid"
            ]
        },
        {
            "id": "aria-orientation",
            "type": "property",
            "valueType": "token",
            "description": "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.",
            "relatedConcepts": null,
            "longDescription": "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.\n\t\t\t\tNoteIn ARIA 1.1, the default value for aria-orientation changed from horizontal to undefined. Implicit defaults are defined on some roles (e.g., slider defaults to horizontal; scrollbar defaults to vertical) but remain undefined on roles where an expected default orientation is ambiguous (e.g., radiogroup).",
            "applicableRoles": [
                "scrollbar",
                "select",
                "separator",
                "slider",
                "tablist",
                "toolbar"
            ],
            "inheritsIntoRoles": [
                "combobox",
                "listbox",
                "menu",
                "menubar",
                "radiogroup",
                "tree",
                "treegrid"
            ]
        },
        {
            "id": "aria-owns",
            "type": "property",
            "valueType": "idref_list",
            "description": "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls.",
            "relatedConcepts": null,
            "longDescription": "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls.\n\t\t\t\tThe value of the aria-owns attribute is a space-separated list of IDREFS that reference one or more elements in the document by ID. The reason for adding aria-owns is to expose a parent/child contextual relationship to assistive technologies that is otherwise impossible to infer from the DOM.\n\t\t\t\tIf an element has both aria-owns and  DOM children then the order of the child elements with respect to the parent/child relationship is the DOM children first, then the elements referenced in aria-owns. If the author intends that the DOM children are not first, then list the DOM children in aria-owns in the desired order. Authors SHOULD NOT use aria-owns as a replacement for the DOM hierarchy. If the relationship is represented in the DOM, do not use aria-owns. Authors MUST ensure that an element's ID is not specified in more than one other element's aria-owns attribute at any time. In other words, an element can have only one explicit owner.",
            "applicableRoles": [],
            "inheritsIntoRoles": []
        },
        {
            "id": "aria-placeholder",
            "type": "property",
            "valueType": "string",
            "description": "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format.",
            "relatedConcepts": "HTML placeholder",
            "longDescription": "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format.\n\t\t\t\tAuthors SHOULD NOT use aria-placeholder instead of a label as their purposes are different: The label indicates what kind of information is expected. The placeholder text is a hint about the expected value. See related aria-labelledby and aria-label.\n\t\t\t\tAuthors SHOULD present this hint to the user by displaying the hint text at any time the control's value is the empty string. This includes cases where the control first receives focus, and when users remove a previously-entered value.\n\t\t\t\tNoteAs is the case with the related HTML placeholder attribute, use of placeholder text as a replacement for a displayed label can reduce the accessibility and usability of the control for a range of users including older users and users with cognitive, mobility, fine motor skill or vision impairments. While the hint given by the control's label is shown at all times, the short hint given in the placeholder attribute is only shown before the user enters a value. Furthermore, placeholder text may be mistaken for a pre-filled value, and as commonly implemented the default color of the placeholder text provides insufficient contrast and the lack of a separate visible label reduces the size of the hit region available for setting focus on the control.\n\t\t\t\tThe following example shows a searchbox in which the user has entered a value:\n\t\t\t\tExample 22<span id=\"label\">Birthday:</span>\n<div contenteditable role=\"searchbox\" aria-labelledby=\"label\" aria-placeholder=\"MM-DD-YYYY\">03-14-1879</div>\n\t\t\t\tThe following example shows the same searchbox in which the user has not yet entered a value or has removed a previously-entered value:\n\t\t\t\tExample 23<span id=\"label\">Birthday:</span>\n<div contenteditable role=\"searchbox\" aria-labelledby=\"label\" aria-placeholder=\"MM-DD-YYYY\">MM-DD-YYYY</div>",
            "applicableRoles": [
                "textbox"
            ],
            "inheritsIntoRoles": [
                "searchbox"
            ]
        },
        {
            "id": "aria-posinset",
            "type": "property",
            "valueType": "integer",
            "description": "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize.",
            "relatedConcepts": null,
            "longDescription": "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize.\n\t\t\t\tIf all items in a set are present in the document structure, it is not necessary to set this attribute, as the user agent can automatically calculate the set size and position for each item. However, if only a portion of the set is present in the document structure at a given moment, this property is needed to provide an explicit indication of an element's position.\n\t\t\t\tThe following example shows items 5 through 8 in a set of 16.\n\t\t\t\tExample 24<h2 id=\"label_fruit\"> Available Fruit </h2>\n<ul role=\"listbox\" aria-labelledby=\"label_fruit\">\n  <li role=\"option\" aria-setsize=\"16\" aria-posinset=\"5\"> apples </li>\n  <li role=\"option\" aria-setsize=\"16\" aria-posinset=\"6\"> bananas </li>\n  <li role=\"option\" aria-setsize=\"16\" aria-posinset=\"7\"> cantaloupes </li>\n  <li role=\"option\" aria-setsize=\"16\" aria-posinset=\"8\"> dates </li>\n</ul>\n\t\t\t\tAuthors MUST set the value for aria-posinset to an integer greater than or equal to 1, and less than or equal to the size of the set when that size is known. Authors SHOULD use aria-setsize.\n\t\t\t\tWhen exposing aria-posinset on a menuitem, menuitemcheckbox, or menuitemradio, authors SHOULD set the value of aria-posinset with respect to the total number of items in the menu, excluding any separators.",
            "applicableRoles": [
                "article",
                "listitem",
                "menuitem",
                "option",
                "radio",
                "tab"
            ],
            "inheritsIntoRoles": [
                "menuitemcheckbox",
                "menuitemradio",
                "treeitem"
            ]
        },
        {
            "id": "aria-readonly",
            "type": "property",
            "valueType": "true-false",
            "description": "Indicates that the element is not editable, but is otherwise operable. See related aria-disabled.",
            "relatedConcepts": "XForms [XFORMS10] Readonly",
            "longDescription": "Indicates that the element is not editable, but is otherwise operable. See related aria-disabled.\n\t\t\t\tThis means the user can read but not set the value of the widget. Readonly elements are relevant to the user, and application authors SHOULD NOT restrict navigation to the element or its focusable descendants. Other actions such as copying the value of the element are also supported. This is in contrast to disabled elements, to which applications might not allow user navigation to descendants.\n\t\t\t\tExamples include:\n\t\t\t\t\n\t\t\t\t\tA form element which represents a constant.\n\t\t\t\t\tRow or column headers in a spreadsheet grid.\n\t\t\t\t\tThe result of a calculation such as a shopping cart total.",
            "applicableRoles": [
                "checkbox",
                "combobox",
                "grid",
                "gridcell",
                "listbox",
                "radiogroup",
                "slider",
                "spinbutton",
                "textbox"
            ],
            "inheritsIntoRoles": [
                "columnheader",
                "menuitemcheckbox",
                "menuitemradio",
                "rowheader",
                "searchbox",
                "switch",
                "treegrid"
            ]
        },
        {
            "id": "aria-relevant",
            "type": "property",
            "valueType": "token_list",
            "description": "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic.",
            "relatedConcepts": null,
            "longDescription": "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic.\n\t\t\t\tThe attribute is represented as a space delimited list of the following values: additions, removals, text; or a single catch-all value all.\n\t\t\t\tThis is used to describe semantically meaningful changes, as opposed to merely presentational ones. For example, nodes that are removed from the top of a log are merely removed for purposes of creating room for other entries, and the removal of them does not have meaning. However, in the case of a buddy list, removal of a buddy name indicates that they are no longer online, and this is a meaningful event. In that case aria-relevant will be set to all. When the aria-relevant attribute is not provided, the default value, additions text, indicates that text modifications and node additions are relevant, but that node removals are irrelevant.\n\t\t\t\tNotearia-relevant values of removals or all are to be used sparingly. Assistive technologies only need to be informed of content removal when its removal represents an important change, such as a buddy leaving a chat room.\n\t\t\t\tNoteText removals should only be considered relevant if one of the specified values is 'removals' or 'all'. For example, for a text change from 'foo' to 'bar' in a live region with a default aria-relevant value, the text addition ('bar') would be spoken, but the text removal ('foo') would not.\n\t\t\t\taria-relevant is an optional attribute of live regions. This is a suggestion to assistive technologies, but assistive technologies are not required to present changes of all the relevant types.\n\t\t\t\tWhen aria-relevant is not defined, an element's value is inherited from the nearest ancestor with a defined value. Although the value is a token list, inherited values are not additive; the value provided on a descendant element completely overrides any inherited value from an ancestor element.\n\t\t\t\tWhen text changes are denoted as relevant, user agents MUST monitor any descendant node change that affects the text alternative computation of the live region as if the accessible name were determined from contents (nameFrom: contents). For example, a text change would be triggered if the HTML alt attribute of a contained image changed. However, no change would be triggered if there was a text change to a node outside the live region, even if that node was referenced (via aria-labelledby) by an element contained in the live region.",
            "applicableRoles": [],
            "inheritsIntoRoles": []
        },
        {
            "id": "aria-required",
            "type": "property",
            "valueType": "true-false",
            "description": "Indicates that user input is required on the element before a form may be submitted.",
            "relatedConcepts": "HTML required",
            "longDescription": "Indicates that user input is required on the element before a form may be submitted.\n\t\t\t\tFor example, if the user needs to fill in an address field, the author will need to set the field's aria-required attribute to true.\n\t\t\t\tNoteThe fact that the element is required is often presented visually (such as a sign or symbol after the widget). Using the aria-required attribute allows the author to explicitly convey to assistive technologies that an element is required.\n\t\t\t\tUnless an exactly equivalent native attribute is available, host languages SHOULD allow authors to use the aria-required attribute on host language form elements that require input or selection by the user.",
            "applicableRoles": [
                "combobox",
                "gridcell",
                "listbox",
                "radiogroup",
                "spinbutton",
                "textbox",
                "tree"
            ],
            "inheritsIntoRoles": [
                "columnheader",
                "rowheader",
                "searchbox",
                "treegrid"
            ]
        },
        {
            "id": "aria-roledescription",
            "type": "property",
            "valueType": "string",
            "description": "Defines a human-readable, author-localized description for the role of an element.",
            "relatedConcepts": null,
            "longDescription": "Defines a human-readable, author-localized description for the role of an element.\n\t\t\t\tSome assistive technologies, such as screen readers, present the role of an element as part of the user experience. Such assistive technologies typically localize the name of the role, and they may customize it as well. Users of these assistive technologies depend on the presentation of the role name, such as \"region,\" \"button,\" or \"slider,\" for an understanding of the purpose of the element and, if it is a widget, how to interact with it.\n\t\t\t\tThe aria-roledescription property gives authors the ability to override how assistive technologies localize and express the name of a role. Thus inappropriately using aria-roledescription may inhibit users' ability to understand or interact with an element. Authors SHOULD limit use of aria-roledescription to clarifying the purpose of non-interactive container roles like group or region, or to providing a more specific description of a widget.\n\t\t\t\t When using aria-roledescription, authors SHOULD also ensure that:\n\t\t\t\t\n\t\t\t\t\tThe element to which aria-roledescription is applied has a valid WAI-ARIA role or has an implicit WAI-ARIA role semantic.\n\t\t\t\t\tThe value of aria-roledescription is not empty or does not contain only whitespace characters.\n\t\t\t\t\n\t\t\t\tUser agents MUST NOT expose the aria-roledescription property if any of the following conditions exist:\n\t\t\t\t\n\t\t\t\t\tThe element to which aria-roledescription is applied does not have a valid WAI-ARIA role or does not have an implicit WAI-ARIA role semantic.\n\t\t\t\t\tThe value of aria-roledescription is empty or contains only whitespace characters.\n\t\t\t\t\n\t\t\t\tAssistive technologies SHOULD use the value of aria-roledescription when presenting the role of an element, but SHOULD NOT change other functionality based on the role of an element that has a value for aria-roledescription. For example, an assistive technology that provides functions for navigating to the next region or button SHOULD allow those functions to navigate to regions and buttons that have an aria-roledescription.\n\t\t\t\tThe following two examples show the use of aria-roledescription to indicate that a non-interactive container is a \"slide\" in a web-based presentation application.\n\t\t\t\tExample 25<div role=\"region\" aria-roledescription=\"slide\" id=\"slide42\" aria-labelledby=\"slide42heading\">\n<h1 id=\"slide42heading\">Quarterly Report</h1>\n<!-- remaining slide contents -->\n</div>\n\t\t\t\tExample 26<section aria-roledescription=\"slide\" id=\"slide42\" aria-labelledby=\"slide42heading\">\n<h1 id=\"slide42heading\">Quarterly Report</h1>\n<!-- remaining slide contents -->\n</section>\n\t\t\t\tIn the previous examples, a screen reader user may hear \"Quarterly Report, slide\" rather than the more vague \"Quarterly Report, region\" or \"Quarterly Report, group.\"\n\t\t\t\tThe following examples show the use of aria-roledescription to indicate that a button in a web-based email client is associated with an \"attachment.\"\n\t\t\t\tExample 27<div role=\"button\" tabindex=\"0\" aria-roledescription=\"attachment button\">family_reunion.jpg</div>\n\t\t\t\tExample 28<button aria-roledescription=\"attachment button\">family_reunion.jpg</button>\n\t\t\t\tIn the previous two examples, because \"button\" is part of the localized description, a screen reader user should still understand how to interact with that control.",
            "applicableRoles": [],
            "inheritsIntoRoles": []
        },
        {
            "id": "aria-rowcount",
            "type": "property",
            "valueType": "integer",
            "description": "Defines the total number of rows in a table, grid, or treegrid. See related aria-rowindex.",
            "relatedConcepts": null,
            "longDescription": "Defines the total number of rows in a table, grid, or treegrid. See related aria-rowindex.\n\t\t\t\tIf all of the rows are present in the DOM, it is not necessary to set this attribute as the user agent can automatically calculate the total number of rows. However, if only a portion of the rows is present in the DOM at a given moment, this attribute is needed to provide an explicit indication of the number of rows in the full table.\n\t\t\t\tAuthors MUST set the value of aria-rowcount to an integer equal to the number of rows in the full table. If the total number of rows is unknown, authors MUST set the value of aria-rowcount to -1 to indicate that the value should not be calculated by the user agent.\n\t\t\t\tThe following example shows a grid with 2000 rows, of which the first row and rows 100 through 102 are displayed to the user.\n\t\t\t\tExample 29<div role=\"grid\" aria-rowcount=\"2000\">\n  <div role=\"rowgroup\">\n    <div role=\"row\" aria-rowindex=\"1\">\n      <span role=\"columnheader\">First Name</span>\n      <span role=\"columnheader\">Last Name</span>\n      <span role=\"columnheader\">Company</span>\n      <span role=\"columnheader\">Phone</span>\n    </div>\n  </div>\n  <div role=\"rowgroup\">\n    <div role=\"row\" aria-rowindex=\"100\">\n      <span role=\"gridcell\">Fred</span>\n      <span role=\"gridcell\">Jackson</span>\n      <span role=\"gridcell\">Acme, Inc.</span>\n      <span role=\"gridcell\">555-1234</span>\n    </div>\n    <div role=\"row\" aria-rowindex=\"101\">\n      <span role=\"gridcell\">Sara</span>\n      <span role=\"gridcell\">James</span>\n      <span role=\"gridcell\">Acme, Inc.</span>\n      <span role=\"gridcell\">555-1235</span>\n    </div>\n    <div role=\"row\" aria-rowindex=\"102\">\n      <span role=\"gridcell\">Taylor</span>\n      <span role=\"gridcell\">Johnson</span>\n      <span role=\"gridcell\">Acme, Inc.</span>\n      <span role=\"gridcell\">555-1236</span>\n    </div>\n  </div>\n</div>",
            "applicableRoles": [
                "table"
            ],
            "inheritsIntoRoles": [
                "grid",
                "treegrid"
            ]
        },
        {
            "id": "aria-rowindex",
            "type": "property",
            "valueType": "integer",
            "description": "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid. See related aria-rowcount and aria-rowspan.",
            "relatedConcepts": null,
            "longDescription": "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid. See related aria-rowcount and aria-rowspan.\n\t\t\t\tIf all of the rows are present in the DOM, it is not necessary to set this attribute as the user agent can automatically calculate the index of each row. However, if only a portion of the rows is present in the DOM at a given moment, this attribute is needed to provide an explicit indication of each row's position with respect to the full table.\n\t\t\t\tAuthors MUST set the value for aria-rowindex to an integer greater than or equal to 1, greater than the aria-rowindex value of any previous rows, and less than or equal to the number of rows in the full table. For a cell or gridcell which spans multiple rows, authors MUST set the value of aria-rowindex to the start of the span.\n\t\t\t\tAuthors SHOULD place aria-rowindex on each row. Authors MAY also place aria-rowindex on all of the children or owned elements of each row.\n\t\t\t\tThe following example shows a grid with 2000 rows, of which the first row and rows 100 through 102 are displayed to the user.\n\t\t\t\tExample 30<div role=\"grid\" aria-rowcount=\"2000\">\n  <div role=\"rowgroup\">\n    <div role=\"row\" aria-rowindex=\"1\">\n      <span role=\"columnheader\">First Name</span>\n      <span role=\"columnheader\">Last Name</span>\n      <span role=\"columnheader\">Company</span>\n      <span role=\"columnheader\">Phone</span>\n    </div>\n  </div>\n  <div role=\"rowgroup\">\n    <div role=\"row\" aria-rowindex=\"100\">\n      <span role=\"gridcell\">Fred</span>\n      <span role=\"gridcell\">Jackson</span>\n      <span role=\"gridcell\">Acme, Inc.</span>\n      <span role=\"gridcell\">555-1234</span>\n    </div>\n    <div role=\"row\" aria-rowindex=\"101\">\n      <span role=\"gridcell\">Sara</span>\n      <span role=\"gridcell\">James</span>\n      <span role=\"gridcell\">Acme, Inc.</span>\n      <span role=\"gridcell\">555-1235</span>\n    </div>\n    <div role=\"row\" aria-rowindex=\"102\">\n      <span role=\"gridcell\">Taylor</span>\n      <span role=\"gridcell\">Johnson</span>\n      <span role=\"gridcell\">Acme, Inc.</span>\n      <span role=\"gridcell\">555-1236</span>\n    </div>\n  </div>\n</div>\n\t\t\t\tThe following example shows the grid from the previous example with aria-rowindex also placed on all of the owned elements of each row.\n\t\t\t\tExample 31<div role=\"grid\" aria-rowcount=\"2000\">\n  <div role=\"rowgroup\">\n    <div role=\"row\" aria-rowindex=\"1\">\n      <span role=\"columnheader\" aria-rowindex=\"1\">First Name</span>\n      <span role=\"columnheader\" aria-rowindex=\"1\">Last Name</span>\n      <span role=\"columnheader\" aria-rowindex=\"1\">Company</span>\n      <span role=\"columnheader\" aria-rowindex=\"1\">Phone</span>\n    </div>\n  </div>\n  <div role=\"rowgroup\">\n    <div role=\"row\" aria-rowindex=\"100\">\n      <span role=\"gridcell\" aria-rowindex=\"100\">Fred</span>\n      <span role=\"gridcell\" aria-rowindex=\"100\">Jackson</span>\n      <span role=\"gridcell\" aria-rowindex=\"100\">Acme, Inc.</span>\n      <span role=\"gridcell\" aria-rowindex=\"100\">555-1234</span>\n    </div>\n    <div role=\"row\" aria-rowindex=\"101\">\n      <span role=\"gridcell\" aria-rowindex=\"101\">Sara</span>\n      <span role=\"gridcell\" aria-rowindex=\"101\">James</span>\n      <span role=\"gridcell\" aria-rowindex=\"101\">Acme, Inc.</span>\n      <span role=\"gridcell\" aria-rowindex=\"101\">555-1235</span>\n    </div>\n    <div role=\"row\" aria-rowindex=\"102\">\n      <span role=\"gridcell\" aria-rowindex=\"102\">Taylor</span>\n      <span role=\"gridcell\" aria-rowindex=\"102\">Johnson</span>\n      <span role=\"gridcell\" aria-rowindex=\"102\">Acme, Inc.</span>\n      <span role=\"gridcell\" aria-rowindex=\"102\">555-1236</span>\n    </div>\n  </div>\n</div>",
            "applicableRoles": [
                "cell",
                "row"
            ],
            "inheritsIntoRoles": [
                "columnheader",
                "gridcell",
                "rowheader"
            ]
        },
        {
            "id": "aria-rowspan",
            "type": "property",
            "valueType": "integer",
            "description": "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-rowindex and aria-colspan.",
            "relatedConcepts": null,
            "longDescription": "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-rowindex and aria-colspan.\n\t\t\t\tThis attribute is intended for cells and gridcells which are not contained in a native table. When defining the row span of cells or gridcells in a native table, authors SHOULD use the host language's attribute instead of aria-rowspan. If aria-rowspan is used on an element for which the host language provides an equivalent attribute, user agents MUST ignore the value of aria-rowspan and instead expose the value of the host language's attribute to assistive technologies.\n\t\t\t\tAuthors MUST set the value of aria-rowspan to an integer greater than or equal to 0 and less than the value which would cause the cell or gridcell to overlap the next cell or gridcell in the same column. Setting the value to 0 indicates that the cell or gridcell is to span all the remaining rows in the row group.",
            "applicableRoles": [
                "cell"
            ],
            "inheritsIntoRoles": [
                "columnheader",
                "gridcell",
                "rowheader"
            ]
        },
        {
            "id": "aria-setsize",
            "type": "property",
            "valueType": "integer",
            "description": "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset.",
            "relatedConcepts": null,
            "longDescription": "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset.\n\t\t\t\tThis property is marked on the members of a set, not the container element that collects the members of the set. To orient the user by saying an element is \"item X out of Y,\" the assistive technologies would use X equal to the aria-posinset attribute and Y equal to the aria-setsize attribute.\n\t\t\t\tIf all items in a set are present in the document structure, it is not necessary to set this property, as the user agent can automatically calculate the set size and position for each item. However, if only a portion of the set is present in the document structure at a given moment (in order to reduce document size), this property is needed to provide an explicit indication of set size.\n\t\t\t\tAuthors MUST set the value of aria-setsize to an integer equal to the number of items in the set. If the total number of items is unknown, authors SHOULD set the value of aria-setsize to -1.\n\t\t\t\tWhen exposing aria-setsize on a menuitem, menuitemcheckbox, or menuitemradio, authors SHOULD set the value of aria-setsize based on the total number of items in the menu, excluding any separators.\n\t\t\t\tThe following example shows items 5 through 8 in a set of 16.\n\t\t\t\tExample 32<h2 id=\"label_fruit\"> Available Fruit </h2>\n<ul role=\"listbox\" aria-labelledby=\"label_fruit\">\n  <li role=\"option\" aria-setsize=\"16\" aria-posinset=\"5\"> apples </li>\n  <li role=\"option\" aria-setsize=\"16\" aria-posinset=\"6\"> bananas </li>\n  <li role=\"option\" aria-setsize=\"16\" aria-posinset=\"7\"> cantaloupes </li>\n  <li role=\"option\" aria-setsize=\"16\" aria-posinset=\"8\"> dates </li>\n</ul>\n\t\t\t\tThe following example shows items 5 through 8 in a set whose total size is unknown.\n\t\t\t\tExample 33<h2 id=\"label_fruit\"> Available Fruit </h2>\n<ul role=\"listbox\" aria-labelledby=\"label_fruit\">\n  <li role=\"option\" aria-setsize=\"-1\" aria-posinset=\"5\"> apples </li>\n  <li role=\"option\" aria-setsize=\"-1\" aria-posinset=\"6\"> bananas </li>\n  <li role=\"option\" aria-setsize=\"-1\" aria-posinset=\"7\"> cantaloupes </li>\n  <li role=\"option\" aria-setsize=\"-1\" aria-posinset=\"8\"> dates </li>\n</ul>",
            "applicableRoles": [
                "article",
                "listitem",
                "menuitem",
                "option",
                "radio",
                "tab"
            ],
            "inheritsIntoRoles": [
                "menuitemcheckbox",
                "menuitemradio",
                "treeitem"
            ]
        },
        {
            "id": "aria-sort",
            "type": "property",
            "valueType": "token",
            "description": "Indicates if items in a table or grid are sorted in ascending or descending order.",
            "relatedConcepts": null,
            "longDescription": "Indicates if items in a table or grid are sorted in ascending or descending order.\n\t\t\t\tAuthors SHOULD only apply this property to table headers or grid headers. If the property is not provided, there is no defined sort order. For each table or grid, authors SHOULD apply aria-sort to only one header at a time.",
            "applicableRoles": [
                "columnheader",
                "rowheader"
            ],
            "inheritsIntoRoles": []
        },
        {
            "id": "aria-valuemax",
            "type": "property",
            "valueType": "number",
            "description": "Defines the maximum allowed value for a range widget.",
            "relatedConcepts": "XForms [XFORMS10] range",
            "longDescription": "Defines the maximum allowed value for a range widget.\n\t\t\t\tAuthors MUST ensure the value of aria-valuemax is greater than or equal to the value of aria-valuemin. If the aria-valuenow has a known maximum and minimum, the author SHOULD provide properties for aria-valuemax and aria-valuemin.\n\t\t\t\tNoteA range widget starts with a given value, which can be increased until reaching the maximum value, defined by this property. Declaring the minimum and maximum values allows assistive technology to convey the size of the range to users.",
            "applicableRoles": [
                "range",
                "scrollbar",
                "separator",
                "slider",
                "spinbutton"
            ],
            "inheritsIntoRoles": [
                "progressbar"
            ]
        },
        {
            "id": "aria-valuemin",
            "type": "property",
            "valueType": "number",
            "description": "Defines the minimum allowed value for a range widget.",
            "relatedConcepts": "XForms [XFORMS10] range",
            "longDescription": "Defines the minimum allowed value for a range widget.\n\t\t\t\tAuthors MUST ensure the value of aria-valuemin is less than or equal to the value of aria-valuemax. If the aria-valuenow has a known maximum and minimum, the author SHOULD provide properties for aria-valuemax and aria-valuemin.\n\t\t\t\tNoteA range widget starts with a given value, which can be decreased until reaching the minimum value, defined by this property. Declaring the minimum and maximum values allows assistive technology to convey the size of the range to users.",
            "applicableRoles": [
                "range",
                "scrollbar",
                "separator",
                "slider",
                "spinbutton"
            ],
            "inheritsIntoRoles": [
                "progressbar"
            ]
        },
        {
            "id": "aria-valuenow",
            "type": "property",
            "valueType": "number",
            "description": "Defines the current value for a range widget. See related aria-valuetext.",
            "relatedConcepts": "XForms [XFORMS10] range, start",
            "longDescription": "Defines the current value for a range widget. See related aria-valuetext.\n\t\t\t\tThis property is used, for example, on a range widget such as a slider or progress bar.\n\t\t\t\tIf the current value is not known (for example, an indeterminate progress bar), the author SHOULD NOT set the aria-valuenow attribute. If the aria-valuenow attribute is absent, no information is implied about the current value. If the aria-valuenow has a known maximum and minimum, the author SHOULD provide properties for aria-valuemax and aria-valuemin.\n\t\t\t\tThe value of aria-valuenow is a decimal number. If the range is a set of numeric values, then aria-valuenow is one of those values. For example, if the range is [0, 1], a valid aria-valuenow is 0.5. A value outside the range, such as -2.5 or 1.1, is invalid.\n\t\t\t\tFor progressbar elements and scrollbar elements, assistive technologies SHOULD render the value to users as a percent, calculated as a position on the range from aria-valuemin to aria-valuemax if both are defined, otherwise the actual value with a percent indicator. For elements with role slider and spinbutton, assistive technologies SHOULD render the actual value to users.\n\t\t\t\tWhen the rendered value cannot be accurately represented as a number, authors SHOULD use the aria-valuetext attribute in conjunction with aria-valuenow to provide a user-friendly representation of the range's current value. For example, a slider may have rendered values of small, medium, and large. In this case, the values of aria-valuetext would be one of the strings: small, medium, or large.\n\t\t\t\tNoteIf aria-valuetext is specified, assistive technologies render that instead of the value of aria-valuenow.",
            "applicableRoles": [
                "range",
                "scrollbar",
                "separator",
                "slider",
                "spinbutton"
            ],
            "inheritsIntoRoles": [
                "progressbar"
            ]
        },
        {
            "id": "aria-valuetext",
            "type": "property",
            "valueType": "string",
            "description": "Defines the human readable text alternative of aria-valuenow for a range widget.",
            "relatedConcepts": "XForms [XFORMS10] range, start",
            "longDescription": "Defines the human readable text alternative of aria-valuenow for a range widget.\n\t\t\t\tThis property is used, for example, on a range widget such as a slider or progress bar.\n\t\t\t\tIf the aria-valuetext attribute is set, authors SHOULD also set the aria-valuenow attribute, unless that value is unknown (for example, on an indeterminate progressbar).\n\t\t\t\tAuthors SHOULD only set the aria-valuetext attribute when the rendered value cannot be meaningfully represented as a number. For example, a slider may have rendered values of small, medium, and large. In this case, the values of aria-valuenow could range from 1 through 3, which indicate the position of each value in the value space, but the aria-valuetext would be one of the strings: small, medium, or large. If the aria-valuetext attribute is absent, the assistive technologies will rely solely on the aria-valuenow attribute for the current value.\n\t\t\t\tIf aria-valuetext is specified, assistive technologies SHOULD render that value instead of the value of aria-valuenow.",
            "applicableRoles": [
                "range",
                "separator"
            ],
            "inheritsIntoRoles": [
                "progressbar",
                "scrollbar",
                "slider",
                "spinbutton"
            ]
        }
    ],
    "values": [
        {
            "id": "valuetype_true-false",
            "name": "true/false",
            "description": "Value representing either true or false. The default value for this value type is false unless otherwise specified."
        },
        {
            "id": "valuetype_tristate",
            "name": "tristate",
            "description": "Value representing true or false, with an intermediate \"mixed\" value. The default value for this value type is false unless otherwise specified."
        },
        {
            "id": "valuetype_true-false-undefined",
            "name": "true/false/undefined",
            "description": "Value representing true, false, or not applicable. For example, an element with aria-expanded set to false is not currently expanded; an element with aria-expanded set to undefined is not expandable. The default value for this value type is undefined unless otherwise specified."
        },
        {
            "id": "valuetype_idref",
            "name": "ID reference",
            "description": "Reference to the ID of another element in the same document"
        },
        {
            "id": "valuetype_idref_list",
            "name": "ID reference list",
            "description": "A list of one or more ID references."
        },
        {
            "id": "valuetype_integer",
            "name": "integer",
            "description": "A numerical value without a fractional component."
        },
        {
            "id": "valuetype_number",
            "name": "number",
            "description": "Any real numerical value."
        },
        {
            "id": "valuetype_string",
            "name": "string",
            "description": "Unconstrained value type."
        },
        {
            "id": "valuetype_token",
            "name": "token",
            "description": "One of a limited set of allowed values. An explicit value of undefined for this type is the equivalent of providing no value."
        },
        {
            "id": "valuetype_token_list",
            "name": "token list",
            "description": "A list of one or more tokens."
        },
        {
            "id": "valuetype_uri",
            "name": "URI",
            "description": "A Uniform Resource Identifier as defined by RFC 3986 [RFC3986]. It may reference a separate document, or a content fragment identifier in a separate document, or a content fragment identifier within the same document."
        }
    ]
}
